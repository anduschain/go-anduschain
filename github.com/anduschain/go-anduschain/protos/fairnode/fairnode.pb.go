// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: fairnode/fairnode.proto

package fairnode

import (
	context "context"
	common "github.com/anduschain/go-anduschain/protos/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_fairnode_fairnode_proto protoreflect.FileDescriptor

var file_fairnode_fairnode_proto_rawDesc = []byte{
	0x0a, 0x17, 0x66, 0x61, 0x69, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x66, 0x61, 0x69, 0x72, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x66, 0x61, 0x69, 0x72, 0x6e,
	0x6f, 0x64, 0x65, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xbc, 0x04, 0x0a, 0x0f, 0x46, 0x61, 0x69, 0x72, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x74,
	0x70, 0x72, 0x6e, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x4f, 0x74, 0x70, 0x72, 0x6e, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x4f, 0x74, 0x70, 0x72, 0x6e, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x37, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65,
	0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x0b, 0x53, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x53, 0x65, 0x61, 0x6c, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x53, 0x65, 0x61, 0x6c, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x37, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x13, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x61, 0x69,
	0x72, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x46, 0x61, 0x69, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x22, 0x00, 0x32, 0x5c, 0x0a, 0x13, 0x46, 0x61, 0x69, 0x72, 0x6e, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x61, 0x69, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x6e, 0x64, 0x75, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x67, 0x6f, 0x2d, 0x61,
	0x6e, 0x64, 0x75, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x66, 0x61, 0x69, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var file_fairnode_fairnode_proto_goTypes = []interface{}{
	(*common.HeartBeat)(nil),       // 0: common.HeartBeat
	(*common.ReqOtprn)(nil),        // 1: common.ReqOtprn
	(*common.Participate)(nil),     // 2: common.Participate
	(*common.ReqLeague)(nil),       // 3: common.ReqLeague
	(*common.Vote)(nil),            // 4: common.Vote
	(*common.ReqVoteResult)(nil),   // 5: common.ReqVoteResult
	(*common.ReqConfirmSeal)(nil),  // 6: common.ReqConfirmSeal
	(*common.ReqBlock)(nil),        // 7: common.ReqBlock
	(*common.ReqFairnodeSign)(nil), // 8: common.ReqFairnodeSign
	(*emptypb.Empty)(nil),          // 9: google.protobuf.Empty
	(*common.ResOtprn)(nil),        // 10: common.ResOtprn
	(*common.ProcessMessage)(nil),  // 11: common.ProcessMessage
	(*common.ResLeague)(nil),       // 12: common.ResLeague
	(*common.ResVoteResult)(nil),   // 13: common.ResVoteResult
	(*common.ResConfirmSeal)(nil),  // 14: common.ResConfirmSeal
	(*common.ResFairnodeSign)(nil), // 15: common.ResFairnodeSign
	(*common.FairnodeMessage)(nil), // 16: common.FairnodeMessage
}
var file_fairnode_fairnode_proto_depIdxs = []int32{
	0,  // 0: fairnode.FairnodeService.HeartBeat:input_type -> common.HeartBeat
	1,  // 1: fairnode.FairnodeService.RequestOtprn:input_type -> common.ReqOtprn
	2,  // 2: fairnode.FairnodeService.ProcessController:input_type -> common.Participate
	3,  // 3: fairnode.FairnodeService.RequestLeague:input_type -> common.ReqLeague
	4,  // 4: fairnode.FairnodeService.Vote:input_type -> common.Vote
	5,  // 5: fairnode.FairnodeService.RequestVoteResult:input_type -> common.ReqVoteResult
	6,  // 6: fairnode.FairnodeService.SealConfirm:input_type -> common.ReqConfirmSeal
	7,  // 7: fairnode.FairnodeService.SendBlock:input_type -> common.ReqBlock
	8,  // 8: fairnode.FairnodeService.RequestFairnodeSign:input_type -> common.ReqFairnodeSign
	9,  // 9: fairnode.FairnodeSyncService.SyncController:input_type -> google.protobuf.Empty
	9,  // 10: fairnode.FairnodeService.HeartBeat:output_type -> google.protobuf.Empty
	10, // 11: fairnode.FairnodeService.RequestOtprn:output_type -> common.ResOtprn
	11, // 12: fairnode.FairnodeService.ProcessController:output_type -> common.ProcessMessage
	12, // 13: fairnode.FairnodeService.RequestLeague:output_type -> common.ResLeague
	9,  // 14: fairnode.FairnodeService.Vote:output_type -> google.protobuf.Empty
	13, // 15: fairnode.FairnodeService.RequestVoteResult:output_type -> common.ResVoteResult
	14, // 16: fairnode.FairnodeService.SealConfirm:output_type -> common.ResConfirmSeal
	9,  // 17: fairnode.FairnodeService.SendBlock:output_type -> google.protobuf.Empty
	15, // 18: fairnode.FairnodeService.RequestFairnodeSign:output_type -> common.ResFairnodeSign
	16, // 19: fairnode.FairnodeSyncService.SyncController:output_type -> common.FairnodeMessage
	10, // [10:20] is the sub-list for method output_type
	0,  // [0:10] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_fairnode_fairnode_proto_init() }
func file_fairnode_fairnode_proto_init() {
	if File_fairnode_fairnode_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fairnode_fairnode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_fairnode_fairnode_proto_goTypes,
		DependencyIndexes: file_fairnode_fairnode_proto_depIdxs,
	}.Build()
	File_fairnode_fairnode_proto = out.File
	file_fairnode_fairnode_proto_rawDesc = nil
	file_fairnode_fairnode_proto_goTypes = nil
	file_fairnode_fairnode_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FairnodeServiceClient is the client API for FairnodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FairnodeServiceClient interface {
	HeartBeat(ctx context.Context, in *common.HeartBeat, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestOtprn(ctx context.Context, in *common.ReqOtprn, opts ...grpc.CallOption) (*common.ResOtprn, error)
	ProcessController(ctx context.Context, in *common.Participate, opts ...grpc.CallOption) (FairnodeService_ProcessControllerClient, error)
	RequestLeague(ctx context.Context, in *common.ReqLeague, opts ...grpc.CallOption) (*common.ResLeague, error)
	Vote(ctx context.Context, in *common.Vote, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestVoteResult(ctx context.Context, in *common.ReqVoteResult, opts ...grpc.CallOption) (*common.ResVoteResult, error)
	SealConfirm(ctx context.Context, in *common.ReqConfirmSeal, opts ...grpc.CallOption) (FairnodeService_SealConfirmClient, error)
	SendBlock(ctx context.Context, in *common.ReqBlock, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestFairnodeSign(ctx context.Context, in *common.ReqFairnodeSign, opts ...grpc.CallOption) (*common.ResFairnodeSign, error)
}

type fairnodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFairnodeServiceClient(cc grpc.ClientConnInterface) FairnodeServiceClient {
	return &fairnodeServiceClient{cc}
}

func (c *fairnodeServiceClient) HeartBeat(ctx context.Context, in *common.HeartBeat, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fairnodeServiceClient) RequestOtprn(ctx context.Context, in *common.ReqOtprn, opts ...grpc.CallOption) (*common.ResOtprn, error) {
	out := new(common.ResOtprn)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/RequestOtprn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fairnodeServiceClient) ProcessController(ctx context.Context, in *common.Participate, opts ...grpc.CallOption) (FairnodeService_ProcessControllerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FairnodeService_serviceDesc.Streams[0], "/fairnode.FairnodeService/ProcessController", opts...)
	if err != nil {
		return nil, err
	}
	x := &fairnodeServiceProcessControllerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FairnodeService_ProcessControllerClient interface {
	Recv() (*common.ProcessMessage, error)
	grpc.ClientStream
}

type fairnodeServiceProcessControllerClient struct {
	grpc.ClientStream
}

func (x *fairnodeServiceProcessControllerClient) Recv() (*common.ProcessMessage, error) {
	m := new(common.ProcessMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fairnodeServiceClient) RequestLeague(ctx context.Context, in *common.ReqLeague, opts ...grpc.CallOption) (*common.ResLeague, error) {
	out := new(common.ResLeague)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/RequestLeague", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fairnodeServiceClient) Vote(ctx context.Context, in *common.Vote, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fairnodeServiceClient) RequestVoteResult(ctx context.Context, in *common.ReqVoteResult, opts ...grpc.CallOption) (*common.ResVoteResult, error) {
	out := new(common.ResVoteResult)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/RequestVoteResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fairnodeServiceClient) SealConfirm(ctx context.Context, in *common.ReqConfirmSeal, opts ...grpc.CallOption) (FairnodeService_SealConfirmClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FairnodeService_serviceDesc.Streams[1], "/fairnode.FairnodeService/SealConfirm", opts...)
	if err != nil {
		return nil, err
	}
	x := &fairnodeServiceSealConfirmClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FairnodeService_SealConfirmClient interface {
	Recv() (*common.ResConfirmSeal, error)
	grpc.ClientStream
}

type fairnodeServiceSealConfirmClient struct {
	grpc.ClientStream
}

func (x *fairnodeServiceSealConfirmClient) Recv() (*common.ResConfirmSeal, error) {
	m := new(common.ResConfirmSeal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fairnodeServiceClient) SendBlock(ctx context.Context, in *common.ReqBlock, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/SendBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fairnodeServiceClient) RequestFairnodeSign(ctx context.Context, in *common.ReqFairnodeSign, opts ...grpc.CallOption) (*common.ResFairnodeSign, error) {
	out := new(common.ResFairnodeSign)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/RequestFairnodeSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FairnodeServiceServer is the server API for FairnodeService service.
type FairnodeServiceServer interface {
	HeartBeat(context.Context, *common.HeartBeat) (*emptypb.Empty, error)
	RequestOtprn(context.Context, *common.ReqOtprn) (*common.ResOtprn, error)
	ProcessController(*common.Participate, FairnodeService_ProcessControllerServer) error
	RequestLeague(context.Context, *common.ReqLeague) (*common.ResLeague, error)
	Vote(context.Context, *common.Vote) (*emptypb.Empty, error)
	RequestVoteResult(context.Context, *common.ReqVoteResult) (*common.ResVoteResult, error)
	SealConfirm(*common.ReqConfirmSeal, FairnodeService_SealConfirmServer) error
	SendBlock(context.Context, *common.ReqBlock) (*emptypb.Empty, error)
	RequestFairnodeSign(context.Context, *common.ReqFairnodeSign) (*common.ResFairnodeSign, error)
}

// UnimplementedFairnodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFairnodeServiceServer struct {
}

func (*UnimplementedFairnodeServiceServer) HeartBeat(context.Context, *common.HeartBeat) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (*UnimplementedFairnodeServiceServer) RequestOtprn(context.Context, *common.ReqOtprn) (*common.ResOtprn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestOtprn not implemented")
}
func (*UnimplementedFairnodeServiceServer) ProcessController(*common.Participate, FairnodeService_ProcessControllerServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessController not implemented")
}
func (*UnimplementedFairnodeServiceServer) RequestLeague(context.Context, *common.ReqLeague) (*common.ResLeague, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLeague not implemented")
}
func (*UnimplementedFairnodeServiceServer) Vote(context.Context, *common.Vote) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedFairnodeServiceServer) RequestVoteResult(context.Context, *common.ReqVoteResult) (*common.ResVoteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVoteResult not implemented")
}
func (*UnimplementedFairnodeServiceServer) SealConfirm(*common.ReqConfirmSeal, FairnodeService_SealConfirmServer) error {
	return status.Errorf(codes.Unimplemented, "method SealConfirm not implemented")
}
func (*UnimplementedFairnodeServiceServer) SendBlock(context.Context, *common.ReqBlock) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBlock not implemented")
}
func (*UnimplementedFairnodeServiceServer) RequestFairnodeSign(context.Context, *common.ReqFairnodeSign) (*common.ResFairnodeSign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFairnodeSign not implemented")
}

func RegisterFairnodeServiceServer(s *grpc.Server, srv FairnodeServiceServer) {
	s.RegisterService(&_FairnodeService_serviceDesc, srv)
}

func _FairnodeService_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).HeartBeat(ctx, req.(*common.HeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _FairnodeService_RequestOtprn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqOtprn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).RequestOtprn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/RequestOtprn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).RequestOtprn(ctx, req.(*common.ReqOtprn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FairnodeService_ProcessController_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Participate)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FairnodeServiceServer).ProcessController(m, &fairnodeServiceProcessControllerServer{stream})
}

type FairnodeService_ProcessControllerServer interface {
	Send(*common.ProcessMessage) error
	grpc.ServerStream
}

type fairnodeServiceProcessControllerServer struct {
	grpc.ServerStream
}

func (x *fairnodeServiceProcessControllerServer) Send(m *common.ProcessMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _FairnodeService_RequestLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqLeague)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).RequestLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/RequestLeague",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).RequestLeague(ctx, req.(*common.ReqLeague))
	}
	return interceptor(ctx, in, info, handler)
}

func _FairnodeService_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).Vote(ctx, req.(*common.Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _FairnodeService_RequestVoteResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqVoteResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).RequestVoteResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/RequestVoteResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).RequestVoteResult(ctx, req.(*common.ReqVoteResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _FairnodeService_SealConfirm_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.ReqConfirmSeal)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FairnodeServiceServer).SealConfirm(m, &fairnodeServiceSealConfirmServer{stream})
}

type FairnodeService_SealConfirmServer interface {
	Send(*common.ResConfirmSeal) error
	grpc.ServerStream
}

type fairnodeServiceSealConfirmServer struct {
	grpc.ServerStream
}

func (x *fairnodeServiceSealConfirmServer) Send(m *common.ResConfirmSeal) error {
	return x.ServerStream.SendMsg(m)
}

func _FairnodeService_SendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).SendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/SendBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).SendBlock(ctx, req.(*common.ReqBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _FairnodeService_RequestFairnodeSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqFairnodeSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).RequestFairnodeSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/RequestFairnodeSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).RequestFairnodeSign(ctx, req.(*common.ReqFairnodeSign))
	}
	return interceptor(ctx, in, info, handler)
}

var _FairnodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairnode.FairnodeService",
	HandlerType: (*FairnodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _FairnodeService_HeartBeat_Handler,
		},
		{
			MethodName: "RequestOtprn",
			Handler:    _FairnodeService_RequestOtprn_Handler,
		},
		{
			MethodName: "RequestLeague",
			Handler:    _FairnodeService_RequestLeague_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _FairnodeService_Vote_Handler,
		},
		{
			MethodName: "RequestVoteResult",
			Handler:    _FairnodeService_RequestVoteResult_Handler,
		},
		{
			MethodName: "SendBlock",
			Handler:    _FairnodeService_SendBlock_Handler,
		},
		{
			MethodName: "RequestFairnodeSign",
			Handler:    _FairnodeService_RequestFairnodeSign_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessController",
			Handler:       _FairnodeService_ProcessController_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SealConfirm",
			Handler:       _FairnodeService_SealConfirm_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fairnode/fairnode.proto",
}

// FairnodeSyncServiceClient is the client API for FairnodeSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FairnodeSyncServiceClient interface {
	SyncController(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (FairnodeSyncService_SyncControllerClient, error)
}

type fairnodeSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFairnodeSyncServiceClient(cc grpc.ClientConnInterface) FairnodeSyncServiceClient {
	return &fairnodeSyncServiceClient{cc}
}

func (c *fairnodeSyncServiceClient) SyncController(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (FairnodeSyncService_SyncControllerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FairnodeSyncService_serviceDesc.Streams[0], "/fairnode.FairnodeSyncService/SyncController", opts...)
	if err != nil {
		return nil, err
	}
	x := &fairnodeSyncServiceSyncControllerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FairnodeSyncService_SyncControllerClient interface {
	Recv() (*common.FairnodeMessage, error)
	grpc.ClientStream
}

type fairnodeSyncServiceSyncControllerClient struct {
	grpc.ClientStream
}

func (x *fairnodeSyncServiceSyncControllerClient) Recv() (*common.FairnodeMessage, error) {
	m := new(common.FairnodeMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FairnodeSyncServiceServer is the server API for FairnodeSyncService service.
type FairnodeSyncServiceServer interface {
	SyncController(*emptypb.Empty, FairnodeSyncService_SyncControllerServer) error
}

// UnimplementedFairnodeSyncServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFairnodeSyncServiceServer struct {
}

func (*UnimplementedFairnodeSyncServiceServer) SyncController(*emptypb.Empty, FairnodeSyncService_SyncControllerServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncController not implemented")
}

func RegisterFairnodeSyncServiceServer(s *grpc.Server, srv FairnodeSyncServiceServer) {
	s.RegisterService(&_FairnodeSyncService_serviceDesc, srv)
}

func _FairnodeSyncService_SyncController_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FairnodeSyncServiceServer).SyncController(m, &fairnodeSyncServiceSyncControllerServer{stream})
}

type FairnodeSyncService_SyncControllerServer interface {
	Send(*common.FairnodeMessage) error
	grpc.ServerStream
}

type fairnodeSyncServiceSyncControllerServer struct {
	grpc.ServerStream
}

func (x *fairnodeSyncServiceSyncControllerServer) Send(m *common.FairnodeMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _FairnodeSyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairnode.FairnodeSyncService",
	HandlerType: (*FairnodeSyncServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncController",
			Handler:       _FairnodeSyncService_SyncController_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fairnode/fairnode.proto",
}
