// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: orderer/orderer.proto

package orderer

import (
	context "context"
	common "github.com/anduschain/go-anduschain/protos/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrdererService_HeartBeat_FullMethodName         = "/orderer.OrdererService/HeartBeat"
	OrdererService_RequestOtprn_FullMethodName      = "/orderer.OrdererService/RequestOtprn"
	OrdererService_Transactions_FullMethodName      = "/orderer.OrdererService/Transactions"
	OrdererService_ProcessController_FullMethodName = "/orderer.OrdererService/ProcessController"
)

// OrdererServiceClient is the client API for OrdererService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdererServiceClient interface {
	HeartBeat(ctx context.Context, in *common.HeartBeat, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestOtprn(ctx context.Context, in *common.ReqOtprn, opts ...grpc.CallOption) (*common.ResOtprn, error)
	Transactions(ctx context.Context, in *common.TransactionList, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProcessController(ctx context.Context, in *common.Participate, opts ...grpc.CallOption) (OrdererService_ProcessControllerClient, error)
}

type ordererServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdererServiceClient(cc grpc.ClientConnInterface) OrdererServiceClient {
	return &ordererServiceClient{cc}
}

func (c *ordererServiceClient) HeartBeat(ctx context.Context, in *common.HeartBeat, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrdererService_HeartBeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererServiceClient) RequestOtprn(ctx context.Context, in *common.ReqOtprn, opts ...grpc.CallOption) (*common.ResOtprn, error) {
	out := new(common.ResOtprn)
	err := c.cc.Invoke(ctx, OrdererService_RequestOtprn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererServiceClient) Transactions(ctx context.Context, in *common.TransactionList, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrdererService_Transactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererServiceClient) ProcessController(ctx context.Context, in *common.Participate, opts ...grpc.CallOption) (OrdererService_ProcessControllerClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrdererService_ServiceDesc.Streams[0], OrdererService_ProcessController_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ordererServiceProcessControllerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrdererService_ProcessControllerClient interface {
	Recv() (*common.TransactionList, error)
	grpc.ClientStream
}

type ordererServiceProcessControllerClient struct {
	grpc.ClientStream
}

func (x *ordererServiceProcessControllerClient) Recv() (*common.TransactionList, error) {
	m := new(common.TransactionList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrdererServiceServer is the server API for OrdererService service.
// All implementations should embed UnimplementedOrdererServiceServer
// for forward compatibility
type OrdererServiceServer interface {
	HeartBeat(context.Context, *common.HeartBeat) (*emptypb.Empty, error)
	RequestOtprn(context.Context, *common.ReqOtprn) (*common.ResOtprn, error)
	Transactions(context.Context, *common.TransactionList) (*emptypb.Empty, error)
	ProcessController(*common.Participate, OrdererService_ProcessControllerServer) error
}

// UnimplementedOrdererServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrdererServiceServer struct {
}

func (UnimplementedOrdererServiceServer) HeartBeat(context.Context, *common.HeartBeat) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedOrdererServiceServer) RequestOtprn(context.Context, *common.ReqOtprn) (*common.ResOtprn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestOtprn not implemented")
}
func (UnimplementedOrdererServiceServer) Transactions(context.Context, *common.TransactionList) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transactions not implemented")
}
func (UnimplementedOrdererServiceServer) ProcessController(*common.Participate, OrdererService_ProcessControllerServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessController not implemented")
}

// UnsafeOrdererServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdererServiceServer will
// result in compilation errors.
type UnsafeOrdererServiceServer interface {
	mustEmbedUnimplementedOrdererServiceServer()
}

func RegisterOrdererServiceServer(s grpc.ServiceRegistrar, srv OrdererServiceServer) {
	s.RegisterService(&OrdererService_ServiceDesc, srv)
}

func _OrdererService_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServiceServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdererService_HeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServiceServer).HeartBeat(ctx, req.(*common.HeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdererService_RequestOtprn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqOtprn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServiceServer).RequestOtprn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdererService_RequestOtprn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServiceServer).RequestOtprn(ctx, req.(*common.ReqOtprn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdererService_Transactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TransactionList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServiceServer).Transactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdererService_Transactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServiceServer).Transactions(ctx, req.(*common.TransactionList))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdererService_ProcessController_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Participate)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrdererServiceServer).ProcessController(m, &ordererServiceProcessControllerServer{stream})
}

type OrdererService_ProcessControllerServer interface {
	Send(*common.TransactionList) error
	grpc.ServerStream
}

type ordererServiceProcessControllerServer struct {
	grpc.ServerStream
}

func (x *ordererServiceProcessControllerServer) Send(m *common.TransactionList) error {
	return x.ServerStream.SendMsg(m)
}

// OrdererService_ServiceDesc is the grpc.ServiceDesc for OrdererService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdererService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderer.OrdererService",
	HandlerType: (*OrdererServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _OrdererService_HeartBeat_Handler,
		},
		{
			MethodName: "RequestOtprn",
			Handler:    _OrdererService_RequestOtprn_Handler,
		},
		{
			MethodName: "Transactions",
			Handler:    _OrdererService_Transactions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessController",
			Handler:       _OrdererService_ProcessController_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "orderer/orderer.proto",
}
