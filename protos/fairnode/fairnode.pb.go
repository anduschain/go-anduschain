// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fairnode/fairnode.proto

package fairnode

import (
	context "context"
	fmt "fmt"
	common "github.com/anduschain/go-anduschain/protos/common"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("fairnode/fairnode.proto", fileDescriptor_be599e5d5fddfca2) }

var fileDescriptor_be599e5d5fddfca2 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xb1, 0x0a, 0xc2, 0x30,
	0x10, 0x86, 0x75, 0x11, 0xe9, 0x22, 0x56, 0x54, 0xa8, 0x9b, 0xbb, 0x89, 0x58, 0x7c, 0x01, 0xc5,
	0x6e, 0x82, 0xd0, 0x49, 0xb7, 0x34, 0xbd, 0xa6, 0x81, 0x24, 0x57, 0x92, 0x54, 0xf0, 0xed, 0xa5,
	0x4d, 0x2b, 0x4e, 0xc9, 0x77, 0xff, 0xdd, 0x77, 0x5c, 0xb4, 0xad, 0x98, 0xb4, 0x06, 0x4b, 0xa0,
	0xe3, 0x87, 0x34, 0x16, 0x3d, 0xc6, 0xf3, 0x91, 0x93, 0x15, 0x47, 0xad, 0xd1, 0xd0, 0xf0, 0x84,
	0x38, 0xd9, 0x09, 0x44, 0xa1, 0x80, 0xf6, 0x54, 0xb4, 0x15, 0x05, 0xdd, 0xf8, 0x4f, 0x08, 0x4f,
	0xcf, 0x68, 0x91, 0x0d, 0xd3, 0x39, 0xd8, 0xb7, 0xe4, 0x10, 0x67, 0xd1, 0xf2, 0x61, 0x91, 0x83,
	0x73, 0x57, 0x34, 0xde, 0xa2, 0x52, 0x60, 0xe3, 0x0d, 0x09, 0x16, 0x32, 0x5a, 0xc8, 0xad, 0xb3,
	0x24, 0x6b, 0x32, 0xec, 0xca, 0x99, 0x6e, 0x14, 0xdc, 0xc1, 0x39, 0x26, 0x60, 0x3f, 0x39, 0x4e,
	0x2f, 0xe7, 0x57, 0x2a, 0xa4, 0xaf, 0xdb, 0xa2, 0x6b, 0xa1, 0xcc, 0x94, 0xad, 0xe3, 0x35, 0x93,
	0x86, 0x0a, 0x3c, 0xfc, 0x51, 0x2f, 0x74, 0xbf, 0x9b, 0x8a, 0x59, 0x5f, 0x48, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x42, 0xf5, 0x31, 0xb6, 0xef, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FairnodeServiceClient is the client API for FairnodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FairnodeServiceClient interface {
	ProcessController(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (FairnodeService_ProcessControllerClient, error)
}

type fairnodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewFairnodeServiceClient(cc *grpc.ClientConn) FairnodeServiceClient {
	return &fairnodeServiceClient{cc}
}

func (c *fairnodeServiceClient) ProcessController(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (FairnodeService_ProcessControllerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FairnodeService_serviceDesc.Streams[0], "/fairnode.FairnodeService/ProcessController", opts...)
	if err != nil {
		return nil, err
	}
	x := &fairnodeServiceProcessControllerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FairnodeService_ProcessControllerClient interface {
	Recv() (*common.SampleMessage, error)
	grpc.ClientStream
}

type fairnodeServiceProcessControllerClient struct {
	grpc.ClientStream
}

func (x *fairnodeServiceProcessControllerClient) Recv() (*common.SampleMessage, error) {
	m := new(common.SampleMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FairnodeServiceServer is the server API for FairnodeService service.
type FairnodeServiceServer interface {
	ProcessController(*empty.Empty, FairnodeService_ProcessControllerServer) error
}

// UnimplementedFairnodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFairnodeServiceServer struct {
}

func (*UnimplementedFairnodeServiceServer) ProcessController(req *empty.Empty, srv FairnodeService_ProcessControllerServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessController not implemented")
}

func RegisterFairnodeServiceServer(s *grpc.Server, srv FairnodeServiceServer) {
	s.RegisterService(&_FairnodeService_serviceDesc, srv)
}

func _FairnodeService_ProcessController_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FairnodeServiceServer).ProcessController(m, &fairnodeServiceProcessControllerServer{stream})
}

type FairnodeService_ProcessControllerServer interface {
	Send(*common.SampleMessage) error
	grpc.ServerStream
}

type fairnodeServiceProcessControllerServer struct {
	grpc.ServerStream
}

func (x *fairnodeServiceProcessControllerServer) Send(m *common.SampleMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _FairnodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairnode.FairnodeService",
	HandlerType: (*FairnodeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessController",
			Handler:       _FairnodeService_ProcessController_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fairnode/fairnode.proto",
}
