// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fairnode/fairnode.proto

package fairnode

import (
	context "context"
	fmt "fmt"
	common "github.com/anduschain/go-anduschain/protos/common"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("fairnode/fairnode.proto", fileDescriptor_be599e5d5fddfca2) }

var fileDescriptor_be599e5d5fddfca2 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x4f, 0xe3, 0x30,
	0x10, 0xc5, 0xb3, 0x52, 0xb5, 0xda, 0x7a, 0xbb, 0x5a, 0x3a, 0x15, 0xad, 0x64, 0x6e, 0xb9, 0x93,
	0x20, 0x0a, 0x82, 0x2b, 0x2d, 0x20, 0x90, 0x40, 0x54, 0xa9, 0xc4, 0x81, 0x9b, 0x9b, 0x4e, 0x53,
	0x8b, 0xc4, 0x93, 0xda, 0x0e, 0x12, 0xdf, 0x8d, 0x0f, 0x87, 0xf2, 0xb7, 0xe6, 0xd2, 0x53, 0x32,
	0xbf, 0x37, 0xf3, 0xc6, 0x2f, 0x31, 0x9b, 0x6c, 0x84, 0xd4, 0x8a, 0xd6, 0x18, 0xb6, 0x2f, 0x41,
	0xae, 0xc9, 0x12, 0xfc, 0x69, 0x6b, 0x3e, 0x8a, 0x29, 0xcb, 0x48, 0x85, 0xf5, 0xa3, 0x96, 0xf9,
	0x49, 0x42, 0x94, 0xa4, 0x18, 0x56, 0xd5, 0xaa, 0xd8, 0x84, 0x98, 0xe5, 0xf6, 0xb3, 0x16, 0xcf,
	0xbf, 0x7a, 0xec, 0xff, 0x7d, 0x33, 0xbe, 0x44, 0xfd, 0x21, 0x63, 0x84, 0x6b, 0xd6, 0x7f, 0x40,
	0xa1, 0xed, 0x0c, 0x85, 0x85, 0x61, 0xd0, 0x98, 0x75, 0x88, 0x8f, 0x83, 0xda, 0x31, 0x68, 0x1d,
	0x83, 0xbb, 0xd2, 0xd1, 0xf7, 0xe0, 0x82, 0x0d, 0x22, 0xdc, 0x15, 0x68, 0xec, 0x8b, 0xcd, 0xb5,
	0x82, 0xa3, 0x76, 0x38, 0xc2, 0x5d, 0x45, 0xb8, 0x43, 0x4c, 0x45, 0x7c, 0x0f, 0x6e, 0xd9, 0x70,
	0xa1, 0x29, 0x46, 0x63, 0xe6, 0xa4, 0xac, 0xa6, 0x34, 0x45, 0x0d, 0xa3, 0xb6, 0x71, 0x21, 0xb4,
	0x95, 0xb1, 0xcc, 0x85, 0x45, 0x3e, 0xee, 0x60, 0xdd, 0xff, 0x8c, 0xc6, 0x88, 0x04, 0x7d, 0xef,
	0xec, 0x17, 0x5c, 0xb1, 0x7f, 0xcd, 0xee, 0x27, 0x14, 0x49, 0x81, 0xfb, 0x93, 0x47, 0xb8, 0xab,
	0x11, 0x77, 0x90, 0xa9, 0x91, 0xef, 0x41, 0xc0, 0x7a, 0xaf, 0x64, 0x11, 0x06, 0xad, 0x58, 0x56,
	0x07, 0x42, 0xce, 0xd9, 0xb0, 0x59, 0x54, 0x36, 0x46, 0x68, 0x8a, 0xd4, 0xc2, 0xb1, 0xb3, 0x6c,
	0x8f, 0xb9, 0x83, 0xcd, 0x1e, 0xfb, 0x1e, 0xdc, 0xb0, 0xbf, 0x4b, 0x14, 0xe9, 0x9c, 0xd4, 0x46,
	0xea, 0x0c, 0xc6, 0xce, 0x78, 0xc3, 0x4a, 0x99, 0x3b, 0xdc, 0x38, 0xbc, 0x09, 0xdc, 0x5f, 0xa2,
	0x5a, 0xcf, 0x52, 0x8a, 0xdf, 0x7f, 0x7c, 0xe9, 0x8a, 0x1c, 0x08, 0xf0, 0xc8, 0x46, 0x4d, 0x80,
	0xee, 0xcf, 0xcb, 0x44, 0xc1, 0xc4, 0xb1, 0x70, 0x05, 0xee, 0x08, 0xc6, 0x15, 0x7c, 0x6f, 0x76,
	0xf9, 0x36, 0x4d, 0xa4, 0xdd, 0x16, 0xab, 0xb2, 0x25, 0x14, 0x6a, 0x5d, 0x98, 0x78, 0x2b, 0xa4,
	0x0a, 0x13, 0x3a, 0x75, 0xaa, 0xea, 0x08, 0xa6, 0xbb, 0xb7, 0xab, 0xdf, 0x15, 0x98, 0x7e, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x38, 0x00, 0x30, 0xd3, 0xd3, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FairnodeServiceClient is the client API for FairnodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FairnodeServiceClient interface {
	HeartBeat(ctx context.Context, in *common.HeartBeat, opts ...grpc.CallOption) (*empty.Empty, error)
	RequestOtprn(ctx context.Context, in *common.ReqOtprn, opts ...grpc.CallOption) (*common.ResOtprn, error)
	ProcessController(ctx context.Context, in *common.Participate, opts ...grpc.CallOption) (FairnodeService_ProcessControllerClient, error)
	RequestLeague(ctx context.Context, in *common.ReqLeague, opts ...grpc.CallOption) (*common.ResLeague, error)
	Vote(ctx context.Context, in *common.Vote, opts ...grpc.CallOption) (*empty.Empty, error)
	RequestVoteResult(ctx context.Context, in *common.ReqVoteResult, opts ...grpc.CallOption) (*common.ResVoteResult, error)
	SealConfirm(ctx context.Context, in *common.ReqConfirmSeal, opts ...grpc.CallOption) (FairnodeService_SealConfirmClient, error)
	SendBlock(ctx context.Context, in *common.ReqBlock, opts ...grpc.CallOption) (*empty.Empty, error)
	RequestFairnodeSign(ctx context.Context, in *common.ReqFairnodeSign, opts ...grpc.CallOption) (*common.ResFairnodeSign, error)
}

type fairnodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewFairnodeServiceClient(cc *grpc.ClientConn) FairnodeServiceClient {
	return &fairnodeServiceClient{cc}
}

func (c *fairnodeServiceClient) HeartBeat(ctx context.Context, in *common.HeartBeat, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fairnodeServiceClient) RequestOtprn(ctx context.Context, in *common.ReqOtprn, opts ...grpc.CallOption) (*common.ResOtprn, error) {
	out := new(common.ResOtprn)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/RequestOtprn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fairnodeServiceClient) ProcessController(ctx context.Context, in *common.Participate, opts ...grpc.CallOption) (FairnodeService_ProcessControllerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FairnodeService_serviceDesc.Streams[0], "/fairnode.FairnodeService/ProcessController", opts...)
	if err != nil {
		return nil, err
	}
	x := &fairnodeServiceProcessControllerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FairnodeService_ProcessControllerClient interface {
	Recv() (*common.ProcessMessage, error)
	grpc.ClientStream
}

type fairnodeServiceProcessControllerClient struct {
	grpc.ClientStream
}

func (x *fairnodeServiceProcessControllerClient) Recv() (*common.ProcessMessage, error) {
	m := new(common.ProcessMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fairnodeServiceClient) RequestLeague(ctx context.Context, in *common.ReqLeague, opts ...grpc.CallOption) (*common.ResLeague, error) {
	out := new(common.ResLeague)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/RequestLeague", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fairnodeServiceClient) Vote(ctx context.Context, in *common.Vote, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fairnodeServiceClient) RequestVoteResult(ctx context.Context, in *common.ReqVoteResult, opts ...grpc.CallOption) (*common.ResVoteResult, error) {
	out := new(common.ResVoteResult)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/RequestVoteResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fairnodeServiceClient) SealConfirm(ctx context.Context, in *common.ReqConfirmSeal, opts ...grpc.CallOption) (FairnodeService_SealConfirmClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FairnodeService_serviceDesc.Streams[1], "/fairnode.FairnodeService/SealConfirm", opts...)
	if err != nil {
		return nil, err
	}
	x := &fairnodeServiceSealConfirmClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FairnodeService_SealConfirmClient interface {
	Recv() (*common.ResConfirmSeal, error)
	grpc.ClientStream
}

type fairnodeServiceSealConfirmClient struct {
	grpc.ClientStream
}

func (x *fairnodeServiceSealConfirmClient) Recv() (*common.ResConfirmSeal, error) {
	m := new(common.ResConfirmSeal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fairnodeServiceClient) SendBlock(ctx context.Context, in *common.ReqBlock, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/SendBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fairnodeServiceClient) RequestFairnodeSign(ctx context.Context, in *common.ReqFairnodeSign, opts ...grpc.CallOption) (*common.ResFairnodeSign, error) {
	out := new(common.ResFairnodeSign)
	err := c.cc.Invoke(ctx, "/fairnode.FairnodeService/RequestFairnodeSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FairnodeServiceServer is the server API for FairnodeService service.
type FairnodeServiceServer interface {
	HeartBeat(context.Context, *common.HeartBeat) (*empty.Empty, error)
	RequestOtprn(context.Context, *common.ReqOtprn) (*common.ResOtprn, error)
	ProcessController(*common.Participate, FairnodeService_ProcessControllerServer) error
	RequestLeague(context.Context, *common.ReqLeague) (*common.ResLeague, error)
	Vote(context.Context, *common.Vote) (*empty.Empty, error)
	RequestVoteResult(context.Context, *common.ReqVoteResult) (*common.ResVoteResult, error)
	SealConfirm(*common.ReqConfirmSeal, FairnodeService_SealConfirmServer) error
	SendBlock(context.Context, *common.ReqBlock) (*empty.Empty, error)
	RequestFairnodeSign(context.Context, *common.ReqFairnodeSign) (*common.ResFairnodeSign, error)
}

// UnimplementedFairnodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFairnodeServiceServer struct {
}

func (*UnimplementedFairnodeServiceServer) HeartBeat(ctx context.Context, req *common.HeartBeat) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (*UnimplementedFairnodeServiceServer) RequestOtprn(ctx context.Context, req *common.ReqOtprn) (*common.ResOtprn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestOtprn not implemented")
}
func (*UnimplementedFairnodeServiceServer) ProcessController(req *common.Participate, srv FairnodeService_ProcessControllerServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessController not implemented")
}
func (*UnimplementedFairnodeServiceServer) RequestLeague(ctx context.Context, req *common.ReqLeague) (*common.ResLeague, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLeague not implemented")
}
func (*UnimplementedFairnodeServiceServer) Vote(ctx context.Context, req *common.Vote) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedFairnodeServiceServer) RequestVoteResult(ctx context.Context, req *common.ReqVoteResult) (*common.ResVoteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVoteResult not implemented")
}
func (*UnimplementedFairnodeServiceServer) SealConfirm(req *common.ReqConfirmSeal, srv FairnodeService_SealConfirmServer) error {
	return status.Errorf(codes.Unimplemented, "method SealConfirm not implemented")
}
func (*UnimplementedFairnodeServiceServer) SendBlock(ctx context.Context, req *common.ReqBlock) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBlock not implemented")
}
func (*UnimplementedFairnodeServiceServer) RequestFairnodeSign(ctx context.Context, req *common.ReqFairnodeSign) (*common.ResFairnodeSign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFairnodeSign not implemented")
}

func RegisterFairnodeServiceServer(s *grpc.Server, srv FairnodeServiceServer) {
	s.RegisterService(&_FairnodeService_serviceDesc, srv)
}

func _FairnodeService_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).HeartBeat(ctx, req.(*common.HeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _FairnodeService_RequestOtprn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqOtprn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).RequestOtprn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/RequestOtprn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).RequestOtprn(ctx, req.(*common.ReqOtprn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FairnodeService_ProcessController_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Participate)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FairnodeServiceServer).ProcessController(m, &fairnodeServiceProcessControllerServer{stream})
}

type FairnodeService_ProcessControllerServer interface {
	Send(*common.ProcessMessage) error
	grpc.ServerStream
}

type fairnodeServiceProcessControllerServer struct {
	grpc.ServerStream
}

func (x *fairnodeServiceProcessControllerServer) Send(m *common.ProcessMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _FairnodeService_RequestLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqLeague)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).RequestLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/RequestLeague",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).RequestLeague(ctx, req.(*common.ReqLeague))
	}
	return interceptor(ctx, in, info, handler)
}

func _FairnodeService_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).Vote(ctx, req.(*common.Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _FairnodeService_RequestVoteResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqVoteResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).RequestVoteResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/RequestVoteResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).RequestVoteResult(ctx, req.(*common.ReqVoteResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _FairnodeService_SealConfirm_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.ReqConfirmSeal)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FairnodeServiceServer).SealConfirm(m, &fairnodeServiceSealConfirmServer{stream})
}

type FairnodeService_SealConfirmServer interface {
	Send(*common.ResConfirmSeal) error
	grpc.ServerStream
}

type fairnodeServiceSealConfirmServer struct {
	grpc.ServerStream
}

func (x *fairnodeServiceSealConfirmServer) Send(m *common.ResConfirmSeal) error {
	return x.ServerStream.SendMsg(m)
}

func _FairnodeService_SendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).SendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/SendBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).SendBlock(ctx, req.(*common.ReqBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _FairnodeService_RequestFairnodeSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReqFairnodeSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FairnodeServiceServer).RequestFairnodeSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fairnode.FairnodeService/RequestFairnodeSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FairnodeServiceServer).RequestFairnodeSign(ctx, req.(*common.ReqFairnodeSign))
	}
	return interceptor(ctx, in, info, handler)
}

var _FairnodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fairnode.FairnodeService",
	HandlerType: (*FairnodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _FairnodeService_HeartBeat_Handler,
		},
		{
			MethodName: "RequestOtprn",
			Handler:    _FairnodeService_RequestOtprn_Handler,
		},
		{
			MethodName: "RequestLeague",
			Handler:    _FairnodeService_RequestLeague_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _FairnodeService_Vote_Handler,
		},
		{
			MethodName: "RequestVoteResult",
			Handler:    _FairnodeService_RequestVoteResult_Handler,
		},
		{
			MethodName: "SendBlock",
			Handler:    _FairnodeService_SendBlock_Handler,
		},
		{
			MethodName: "RequestFairnodeSign",
			Handler:    _FairnodeService_RequestFairnodeSign_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessController",
			Handler:       _FairnodeService_ProcessController_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SealConfirm",
			Handler:       _FairnodeService_SealConfirm_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fairnode/fairnode.proto",
}
