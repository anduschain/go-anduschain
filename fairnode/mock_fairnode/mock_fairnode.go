// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/anduschain/go/src/github.com/anduschain/go-anduschain/fairnode/mock_fairnode/../../protos/fairnode/fairnode.pb.go

// Package mock_fairnode is a generated GoMock package.
package mock_fairnode

import (
	context "context"
	reflect "reflect"

	common "github.com/anduschain/go-anduschain/protos/common"
	fairnode "github.com/anduschain/go-anduschain/protos/fairnode"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockFairnodeServiceClient is a mock of FairnodeServiceClient interface.
type MockFairnodeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFairnodeServiceClientMockRecorder
}

// MockFairnodeServiceClientMockRecorder is the mock recorder for MockFairnodeServiceClient.
type MockFairnodeServiceClientMockRecorder struct {
	mock *MockFairnodeServiceClient
}

// NewMockFairnodeServiceClient creates a new mock instance.
func NewMockFairnodeServiceClient(ctrl *gomock.Controller) *MockFairnodeServiceClient {
	mock := &MockFairnodeServiceClient{ctrl: ctrl}
	mock.recorder = &MockFairnodeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFairnodeServiceClient) EXPECT() *MockFairnodeServiceClientMockRecorder {
	return m.recorder
}

// HeartBeat mocks base method.
func (m *MockFairnodeServiceClient) HeartBeat(ctx context.Context, in *common.HeartBeat, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeartBeat", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartBeat indicates an expected call of HeartBeat.
func (mr *MockFairnodeServiceClientMockRecorder) HeartBeat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartBeat", reflect.TypeOf((*MockFairnodeServiceClient)(nil).HeartBeat), varargs...)
}

// ProcessController mocks base method.
func (m *MockFairnodeServiceClient) ProcessController(ctx context.Context, in *common.Participate, opts ...grpc.CallOption) (fairnode.FairnodeService_ProcessControllerClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessController", varargs...)
	ret0, _ := ret[0].(fairnode.FairnodeService_ProcessControllerClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessController indicates an expected call of ProcessController.
func (mr *MockFairnodeServiceClientMockRecorder) ProcessController(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessController", reflect.TypeOf((*MockFairnodeServiceClient)(nil).ProcessController), varargs...)
}

// RequestFairnodeSign mocks base method.
func (m *MockFairnodeServiceClient) RequestFairnodeSign(ctx context.Context, in *common.ReqFairnodeSign, opts ...grpc.CallOption) (*common.ResFairnodeSign, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestFairnodeSign", varargs...)
	ret0, _ := ret[0].(*common.ResFairnodeSign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestFairnodeSign indicates an expected call of RequestFairnodeSign.
func (mr *MockFairnodeServiceClientMockRecorder) RequestFairnodeSign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestFairnodeSign", reflect.TypeOf((*MockFairnodeServiceClient)(nil).RequestFairnodeSign), varargs...)
}

// RequestLeague mocks base method.
func (m *MockFairnodeServiceClient) RequestLeague(ctx context.Context, in *common.ReqLeague, opts ...grpc.CallOption) (*common.ResLeague, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestLeague", varargs...)
	ret0, _ := ret[0].(*common.ResLeague)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestLeague indicates an expected call of RequestLeague.
func (mr *MockFairnodeServiceClientMockRecorder) RequestLeague(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestLeague", reflect.TypeOf((*MockFairnodeServiceClient)(nil).RequestLeague), varargs...)
}

// RequestOtprn mocks base method.
func (m *MockFairnodeServiceClient) RequestOtprn(ctx context.Context, in *common.ReqOtprn, opts ...grpc.CallOption) (*common.ResOtprn, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestOtprn", varargs...)
	ret0, _ := ret[0].(*common.ResOtprn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestOtprn indicates an expected call of RequestOtprn.
func (mr *MockFairnodeServiceClientMockRecorder) RequestOtprn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestOtprn", reflect.TypeOf((*MockFairnodeServiceClient)(nil).RequestOtprn), varargs...)
}

// RequestVoteResult mocks base method.
func (m *MockFairnodeServiceClient) RequestVoteResult(ctx context.Context, in *common.ReqVoteResult, opts ...grpc.CallOption) (*common.ResVoteResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestVoteResult", varargs...)
	ret0, _ := ret[0].(*common.ResVoteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestVoteResult indicates an expected call of RequestVoteResult.
func (mr *MockFairnodeServiceClientMockRecorder) RequestVoteResult(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVoteResult", reflect.TypeOf((*MockFairnodeServiceClient)(nil).RequestVoteResult), varargs...)
}

// SealConfirm mocks base method.
func (m *MockFairnodeServiceClient) SealConfirm(ctx context.Context, in *common.ReqConfirmSeal, opts ...grpc.CallOption) (fairnode.FairnodeService_SealConfirmClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SealConfirm", varargs...)
	ret0, _ := ret[0].(fairnode.FairnodeService_SealConfirmClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SealConfirm indicates an expected call of SealConfirm.
func (mr *MockFairnodeServiceClientMockRecorder) SealConfirm(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SealConfirm", reflect.TypeOf((*MockFairnodeServiceClient)(nil).SealConfirm), varargs...)
}

// SendBlock mocks base method.
func (m *MockFairnodeServiceClient) SendBlock(ctx context.Context, in *common.ReqBlock, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendBlock", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBlock indicates an expected call of SendBlock.
func (mr *MockFairnodeServiceClientMockRecorder) SendBlock(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBlock", reflect.TypeOf((*MockFairnodeServiceClient)(nil).SendBlock), varargs...)
}

// Vote mocks base method.
func (m *MockFairnodeServiceClient) Vote(ctx context.Context, in *common.Vote, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Vote", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vote indicates an expected call of Vote.
func (mr *MockFairnodeServiceClientMockRecorder) Vote(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockFairnodeServiceClient)(nil).Vote), varargs...)
}

// MockFairnodeService_ProcessControllerClient is a mock of FairnodeService_ProcessControllerClient interface.
type MockFairnodeService_ProcessControllerClient struct {
	ctrl     *gomock.Controller
	recorder *MockFairnodeService_ProcessControllerClientMockRecorder
}

// MockFairnodeService_ProcessControllerClientMockRecorder is the mock recorder for MockFairnodeService_ProcessControllerClient.
type MockFairnodeService_ProcessControllerClientMockRecorder struct {
	mock *MockFairnodeService_ProcessControllerClient
}

// NewMockFairnodeService_ProcessControllerClient creates a new mock instance.
func NewMockFairnodeService_ProcessControllerClient(ctrl *gomock.Controller) *MockFairnodeService_ProcessControllerClient {
	mock := &MockFairnodeService_ProcessControllerClient{ctrl: ctrl}
	mock.recorder = &MockFairnodeService_ProcessControllerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFairnodeService_ProcessControllerClient) EXPECT() *MockFairnodeService_ProcessControllerClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFairnodeService_ProcessControllerClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFairnodeService_ProcessControllerClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFairnodeService_ProcessControllerClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFairnodeService_ProcessControllerClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFairnodeService_ProcessControllerClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFairnodeService_ProcessControllerClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFairnodeService_ProcessControllerClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFairnodeService_ProcessControllerClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFairnodeService_ProcessControllerClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFairnodeService_ProcessControllerClient) Recv() (*common.ProcessMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*common.ProcessMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFairnodeService_ProcessControllerClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFairnodeService_ProcessControllerClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFairnodeService_ProcessControllerClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFairnodeService_ProcessControllerClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFairnodeService_ProcessControllerClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFairnodeService_ProcessControllerClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFairnodeService_ProcessControllerClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFairnodeService_ProcessControllerClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFairnodeService_ProcessControllerClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFairnodeService_ProcessControllerClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFairnodeService_ProcessControllerClient)(nil).Trailer))
}

// MockFairnodeService_SealConfirmClient is a mock of FairnodeService_SealConfirmClient interface.
type MockFairnodeService_SealConfirmClient struct {
	ctrl     *gomock.Controller
	recorder *MockFairnodeService_SealConfirmClientMockRecorder
}

// MockFairnodeService_SealConfirmClientMockRecorder is the mock recorder for MockFairnodeService_SealConfirmClient.
type MockFairnodeService_SealConfirmClientMockRecorder struct {
	mock *MockFairnodeService_SealConfirmClient
}

// NewMockFairnodeService_SealConfirmClient creates a new mock instance.
func NewMockFairnodeService_SealConfirmClient(ctrl *gomock.Controller) *MockFairnodeService_SealConfirmClient {
	mock := &MockFairnodeService_SealConfirmClient{ctrl: ctrl}
	mock.recorder = &MockFairnodeService_SealConfirmClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFairnodeService_SealConfirmClient) EXPECT() *MockFairnodeService_SealConfirmClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFairnodeService_SealConfirmClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFairnodeService_SealConfirmClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFairnodeService_SealConfirmClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFairnodeService_SealConfirmClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFairnodeService_SealConfirmClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFairnodeService_SealConfirmClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFairnodeService_SealConfirmClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFairnodeService_SealConfirmClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFairnodeService_SealConfirmClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFairnodeService_SealConfirmClient) Recv() (*common.ResConfirmSeal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*common.ResConfirmSeal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFairnodeService_SealConfirmClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFairnodeService_SealConfirmClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFairnodeService_SealConfirmClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFairnodeService_SealConfirmClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFairnodeService_SealConfirmClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFairnodeService_SealConfirmClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFairnodeService_SealConfirmClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFairnodeService_SealConfirmClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFairnodeService_SealConfirmClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFairnodeService_SealConfirmClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFairnodeService_SealConfirmClient)(nil).Trailer))
}

// MockFairnodeServiceServer is a mock of FairnodeServiceServer interface.
type MockFairnodeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFairnodeServiceServerMockRecorder
}

// MockFairnodeServiceServerMockRecorder is the mock recorder for MockFairnodeServiceServer.
type MockFairnodeServiceServerMockRecorder struct {
	mock *MockFairnodeServiceServer
}

// NewMockFairnodeServiceServer creates a new mock instance.
func NewMockFairnodeServiceServer(ctrl *gomock.Controller) *MockFairnodeServiceServer {
	mock := &MockFairnodeServiceServer{ctrl: ctrl}
	mock.recorder = &MockFairnodeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFairnodeServiceServer) EXPECT() *MockFairnodeServiceServerMockRecorder {
	return m.recorder
}

// HeartBeat mocks base method.
func (m *MockFairnodeServiceServer) HeartBeat(arg0 context.Context, arg1 *common.HeartBeat) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeartBeat", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeartBeat indicates an expected call of HeartBeat.
func (mr *MockFairnodeServiceServerMockRecorder) HeartBeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartBeat", reflect.TypeOf((*MockFairnodeServiceServer)(nil).HeartBeat), arg0, arg1)
}

// ProcessController mocks base method.
func (m *MockFairnodeServiceServer) ProcessController(arg0 *common.Participate, arg1 fairnode.FairnodeService_ProcessControllerServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessController indicates an expected call of ProcessController.
func (mr *MockFairnodeServiceServerMockRecorder) ProcessController(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessController", reflect.TypeOf((*MockFairnodeServiceServer)(nil).ProcessController), arg0, arg1)
}

// RequestFairnodeSign mocks base method.
func (m *MockFairnodeServiceServer) RequestFairnodeSign(arg0 context.Context, arg1 *common.ReqFairnodeSign) (*common.ResFairnodeSign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestFairnodeSign", arg0, arg1)
	ret0, _ := ret[0].(*common.ResFairnodeSign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestFairnodeSign indicates an expected call of RequestFairnodeSign.
func (mr *MockFairnodeServiceServerMockRecorder) RequestFairnodeSign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestFairnodeSign", reflect.TypeOf((*MockFairnodeServiceServer)(nil).RequestFairnodeSign), arg0, arg1)
}

// RequestLeague mocks base method.
func (m *MockFairnodeServiceServer) RequestLeague(arg0 context.Context, arg1 *common.ReqLeague) (*common.ResLeague, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestLeague", arg0, arg1)
	ret0, _ := ret[0].(*common.ResLeague)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestLeague indicates an expected call of RequestLeague.
func (mr *MockFairnodeServiceServerMockRecorder) RequestLeague(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestLeague", reflect.TypeOf((*MockFairnodeServiceServer)(nil).RequestLeague), arg0, arg1)
}

// RequestOtprn mocks base method.
func (m *MockFairnodeServiceServer) RequestOtprn(arg0 context.Context, arg1 *common.ReqOtprn) (*common.ResOtprn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestOtprn", arg0, arg1)
	ret0, _ := ret[0].(*common.ResOtprn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestOtprn indicates an expected call of RequestOtprn.
func (mr *MockFairnodeServiceServerMockRecorder) RequestOtprn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestOtprn", reflect.TypeOf((*MockFairnodeServiceServer)(nil).RequestOtprn), arg0, arg1)
}

// RequestVoteResult mocks base method.
func (m *MockFairnodeServiceServer) RequestVoteResult(arg0 context.Context, arg1 *common.ReqVoteResult) (*common.ResVoteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestVoteResult", arg0, arg1)
	ret0, _ := ret[0].(*common.ResVoteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestVoteResult indicates an expected call of RequestVoteResult.
func (mr *MockFairnodeServiceServerMockRecorder) RequestVoteResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVoteResult", reflect.TypeOf((*MockFairnodeServiceServer)(nil).RequestVoteResult), arg0, arg1)
}

// SealConfirm mocks base method.
func (m *MockFairnodeServiceServer) SealConfirm(arg0 *common.ReqConfirmSeal, arg1 fairnode.FairnodeService_SealConfirmServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SealConfirm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SealConfirm indicates an expected call of SealConfirm.
func (mr *MockFairnodeServiceServerMockRecorder) SealConfirm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SealConfirm", reflect.TypeOf((*MockFairnodeServiceServer)(nil).SealConfirm), arg0, arg1)
}

// SendBlock mocks base method.
func (m *MockFairnodeServiceServer) SendBlock(arg0 context.Context, arg1 *common.ReqBlock) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBlock", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBlock indicates an expected call of SendBlock.
func (mr *MockFairnodeServiceServerMockRecorder) SendBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBlock", reflect.TypeOf((*MockFairnodeServiceServer)(nil).SendBlock), arg0, arg1)
}

// Vote mocks base method.
func (m *MockFairnodeServiceServer) Vote(arg0 context.Context, arg1 *common.Vote) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vote indicates an expected call of Vote.
func (mr *MockFairnodeServiceServerMockRecorder) Vote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockFairnodeServiceServer)(nil).Vote), arg0, arg1)
}

// MockFairnodeService_ProcessControllerServer is a mock of FairnodeService_ProcessControllerServer interface.
type MockFairnodeService_ProcessControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockFairnodeService_ProcessControllerServerMockRecorder
}

// MockFairnodeService_ProcessControllerServerMockRecorder is the mock recorder for MockFairnodeService_ProcessControllerServer.
type MockFairnodeService_ProcessControllerServerMockRecorder struct {
	mock *MockFairnodeService_ProcessControllerServer
}

// NewMockFairnodeService_ProcessControllerServer creates a new mock instance.
func NewMockFairnodeService_ProcessControllerServer(ctrl *gomock.Controller) *MockFairnodeService_ProcessControllerServer {
	mock := &MockFairnodeService_ProcessControllerServer{ctrl: ctrl}
	mock.recorder = &MockFairnodeService_ProcessControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFairnodeService_ProcessControllerServer) EXPECT() *MockFairnodeService_ProcessControllerServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFairnodeService_ProcessControllerServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFairnodeService_ProcessControllerServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFairnodeService_ProcessControllerServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFairnodeService_ProcessControllerServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFairnodeService_ProcessControllerServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFairnodeService_ProcessControllerServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFairnodeService_ProcessControllerServer) Send(arg0 *common.ProcessMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFairnodeService_ProcessControllerServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFairnodeService_ProcessControllerServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFairnodeService_ProcessControllerServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFairnodeService_ProcessControllerServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFairnodeService_ProcessControllerServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFairnodeService_ProcessControllerServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFairnodeService_ProcessControllerServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFairnodeService_ProcessControllerServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFairnodeService_ProcessControllerServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFairnodeService_ProcessControllerServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFairnodeService_ProcessControllerServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFairnodeService_ProcessControllerServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFairnodeService_ProcessControllerServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFairnodeService_ProcessControllerServer)(nil).SetTrailer), arg0)
}

// MockFairnodeService_SealConfirmServer is a mock of FairnodeService_SealConfirmServer interface.
type MockFairnodeService_SealConfirmServer struct {
	ctrl     *gomock.Controller
	recorder *MockFairnodeService_SealConfirmServerMockRecorder
}

// MockFairnodeService_SealConfirmServerMockRecorder is the mock recorder for MockFairnodeService_SealConfirmServer.
type MockFairnodeService_SealConfirmServerMockRecorder struct {
	mock *MockFairnodeService_SealConfirmServer
}

// NewMockFairnodeService_SealConfirmServer creates a new mock instance.
func NewMockFairnodeService_SealConfirmServer(ctrl *gomock.Controller) *MockFairnodeService_SealConfirmServer {
	mock := &MockFairnodeService_SealConfirmServer{ctrl: ctrl}
	mock.recorder = &MockFairnodeService_SealConfirmServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFairnodeService_SealConfirmServer) EXPECT() *MockFairnodeService_SealConfirmServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFairnodeService_SealConfirmServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFairnodeService_SealConfirmServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFairnodeService_SealConfirmServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFairnodeService_SealConfirmServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFairnodeService_SealConfirmServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFairnodeService_SealConfirmServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFairnodeService_SealConfirmServer) Send(arg0 *common.ResConfirmSeal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFairnodeService_SealConfirmServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFairnodeService_SealConfirmServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFairnodeService_SealConfirmServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFairnodeService_SealConfirmServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFairnodeService_SealConfirmServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFairnodeService_SealConfirmServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFairnodeService_SealConfirmServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFairnodeService_SealConfirmServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFairnodeService_SealConfirmServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFairnodeService_SealConfirmServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFairnodeService_SealConfirmServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFairnodeService_SealConfirmServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFairnodeService_SealConfirmServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFairnodeService_SealConfirmServer)(nil).SetTrailer), arg0)
}

// MockFairnodeSyncServiceClient is a mock of FairnodeSyncServiceClient interface.
type MockFairnodeSyncServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFairnodeSyncServiceClientMockRecorder
}

// MockFairnodeSyncServiceClientMockRecorder is the mock recorder for MockFairnodeSyncServiceClient.
type MockFairnodeSyncServiceClientMockRecorder struct {
	mock *MockFairnodeSyncServiceClient
}

// NewMockFairnodeSyncServiceClient creates a new mock instance.
func NewMockFairnodeSyncServiceClient(ctrl *gomock.Controller) *MockFairnodeSyncServiceClient {
	mock := &MockFairnodeSyncServiceClient{ctrl: ctrl}
	mock.recorder = &MockFairnodeSyncServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFairnodeSyncServiceClient) EXPECT() *MockFairnodeSyncServiceClientMockRecorder {
	return m.recorder
}

// SyncController mocks base method.
func (m *MockFairnodeSyncServiceClient) SyncController(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (fairnode.FairnodeSyncService_SyncControllerClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncController", varargs...)
	ret0, _ := ret[0].(fairnode.FairnodeSyncService_SyncControllerClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncController indicates an expected call of SyncController.
func (mr *MockFairnodeSyncServiceClientMockRecorder) SyncController(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncController", reflect.TypeOf((*MockFairnodeSyncServiceClient)(nil).SyncController), varargs...)
}

// MockFairnodeSyncService_SyncControllerClient is a mock of FairnodeSyncService_SyncControllerClient interface.
type MockFairnodeSyncService_SyncControllerClient struct {
	ctrl     *gomock.Controller
	recorder *MockFairnodeSyncService_SyncControllerClientMockRecorder
}

// MockFairnodeSyncService_SyncControllerClientMockRecorder is the mock recorder for MockFairnodeSyncService_SyncControllerClient.
type MockFairnodeSyncService_SyncControllerClientMockRecorder struct {
	mock *MockFairnodeSyncService_SyncControllerClient
}

// NewMockFairnodeSyncService_SyncControllerClient creates a new mock instance.
func NewMockFairnodeSyncService_SyncControllerClient(ctrl *gomock.Controller) *MockFairnodeSyncService_SyncControllerClient {
	mock := &MockFairnodeSyncService_SyncControllerClient{ctrl: ctrl}
	mock.recorder = &MockFairnodeSyncService_SyncControllerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFairnodeSyncService_SyncControllerClient) EXPECT() *MockFairnodeSyncService_SyncControllerClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFairnodeSyncService_SyncControllerClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFairnodeSyncService_SyncControllerClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFairnodeSyncService_SyncControllerClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFairnodeSyncService_SyncControllerClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerClient)(nil).Context))
}

// Header mocks base method.
func (m *MockFairnodeSyncService_SyncControllerClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFairnodeSyncService_SyncControllerClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockFairnodeSyncService_SyncControllerClient) Recv() (*common.FairnodeMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*common.FairnodeMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFairnodeSyncService_SyncControllerClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFairnodeSyncService_SyncControllerClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFairnodeSyncService_SyncControllerClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFairnodeSyncService_SyncControllerClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFairnodeSyncService_SyncControllerClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFairnodeSyncService_SyncControllerClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFairnodeSyncService_SyncControllerClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerClient)(nil).Trailer))
}

// MockFairnodeSyncServiceServer is a mock of FairnodeSyncServiceServer interface.
type MockFairnodeSyncServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFairnodeSyncServiceServerMockRecorder
}

// MockFairnodeSyncServiceServerMockRecorder is the mock recorder for MockFairnodeSyncServiceServer.
type MockFairnodeSyncServiceServerMockRecorder struct {
	mock *MockFairnodeSyncServiceServer
}

// NewMockFairnodeSyncServiceServer creates a new mock instance.
func NewMockFairnodeSyncServiceServer(ctrl *gomock.Controller) *MockFairnodeSyncServiceServer {
	mock := &MockFairnodeSyncServiceServer{ctrl: ctrl}
	mock.recorder = &MockFairnodeSyncServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFairnodeSyncServiceServer) EXPECT() *MockFairnodeSyncServiceServerMockRecorder {
	return m.recorder
}

// SyncController mocks base method.
func (m *MockFairnodeSyncServiceServer) SyncController(arg0 *emptypb.Empty, arg1 fairnode.FairnodeSyncService_SyncControllerServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncController indicates an expected call of SyncController.
func (mr *MockFairnodeSyncServiceServerMockRecorder) SyncController(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncController", reflect.TypeOf((*MockFairnodeSyncServiceServer)(nil).SyncController), arg0, arg1)
}

// MockFairnodeSyncService_SyncControllerServer is a mock of FairnodeSyncService_SyncControllerServer interface.
type MockFairnodeSyncService_SyncControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockFairnodeSyncService_SyncControllerServerMockRecorder
}

// MockFairnodeSyncService_SyncControllerServerMockRecorder is the mock recorder for MockFairnodeSyncService_SyncControllerServer.
type MockFairnodeSyncService_SyncControllerServerMockRecorder struct {
	mock *MockFairnodeSyncService_SyncControllerServer
}

// NewMockFairnodeSyncService_SyncControllerServer creates a new mock instance.
func NewMockFairnodeSyncService_SyncControllerServer(ctrl *gomock.Controller) *MockFairnodeSyncService_SyncControllerServer {
	mock := &MockFairnodeSyncService_SyncControllerServer{ctrl: ctrl}
	mock.recorder = &MockFairnodeSyncService_SyncControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFairnodeSyncService_SyncControllerServer) EXPECT() *MockFairnodeSyncService_SyncControllerServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockFairnodeSyncService_SyncControllerServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFairnodeSyncService_SyncControllerServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockFairnodeSyncService_SyncControllerServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFairnodeSyncService_SyncControllerServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockFairnodeSyncService_SyncControllerServer) Send(arg0 *common.FairnodeMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockFairnodeSyncService_SyncControllerServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockFairnodeSyncService_SyncControllerServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockFairnodeSyncService_SyncControllerServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockFairnodeSyncService_SyncControllerServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFairnodeSyncService_SyncControllerServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockFairnodeSyncService_SyncControllerServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockFairnodeSyncService_SyncControllerServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockFairnodeSyncService_SyncControllerServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockFairnodeSyncService_SyncControllerServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockFairnodeSyncService_SyncControllerServer)(nil).SetTrailer), arg0)
}
