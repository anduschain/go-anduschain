// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/anduschain/go-anduschain/common"
	"github.com/anduschain/go-anduschain/common/hexutil"
)

var _ = (*joinTxdataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (j joinTxdata) MarshalJSON() ([]byte, error) {
	type joinTxdata struct {
		JoinNonce hexutil.Uint64 `json:"nonce"    gencodec:"required"`
		Fee       *hexutil.Big   `json:"fee"    gencodec:"required"`
		Otprn     hexutil.Bytes  `json:"otprn"    gencodec:"required"`
		V         *hexutil.Big   `json:"v" gencodec:"required"`
		R         *hexutil.Big   `json:"r" gencodec:"required"`
		S         *hexutil.Big   `json:"s" gencodec:"required"`
		Hash      *common.Hash   `json:"hash" rlp:"-"`
	}
	var enc joinTxdata
	enc.JoinNonce = hexutil.Uint64(j.JoinNonce)
	enc.Fee = (*hexutil.Big)(j.Fee)
	enc.Otprn = j.Otprn
	enc.V = (*hexutil.Big)(j.V)
	enc.R = (*hexutil.Big)(j.R)
	enc.S = (*hexutil.Big)(j.S)
	enc.Hash = j.Hash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (j *joinTxdata) UnmarshalJSON(input []byte) error {
	type joinTxdata struct {
		JoinNonce *hexutil.Uint64 `json:"nonce"    gencodec:"required"`
		Fee       *hexutil.Big    `json:"fee"    gencodec:"required"`
		Otprn     *hexutil.Bytes  `json:"otprn"    gencodec:"required"`
		V         *hexutil.Big    `json:"v" gencodec:"required"`
		R         *hexutil.Big    `json:"r" gencodec:"required"`
		S         *hexutil.Big    `json:"s" gencodec:"required"`
		Hash      *common.Hash    `json:"hash" rlp:"-"`
	}
	var dec joinTxdata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.JoinNonce == nil {
		return errors.New("missing required field 'nonce' for joinTxdata")
	}
	j.JoinNonce = uint64(*dec.JoinNonce)
	if dec.Fee == nil {
		return errors.New("missing required field 'fee' for joinTxdata")
	}
	j.Fee = (*big.Int)(dec.Fee)
	if dec.Otprn == nil {
		return errors.New("missing required field 'otprn' for joinTxdata")
	}
	j.Otprn = *dec.Otprn
	if dec.V == nil {
		return errors.New("missing required field 'v' for joinTxdata")
	}
	j.V = (*big.Int)(dec.V)
	if dec.R == nil {
		return errors.New("missing required field 'r' for joinTxdata")
	}
	j.R = (*big.Int)(dec.R)
	if dec.S == nil {
		return errors.New("missing required field 's' for joinTxdata")
	}
	j.S = (*big.Int)(dec.S)
	if dec.Hash != nil {
		j.Hash = dec.Hash
	}
	return nil
}
