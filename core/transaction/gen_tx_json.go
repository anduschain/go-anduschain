// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package transaction

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/anduschain/go-anduschain/common"
	"github.com/anduschain/go-anduschain/common/hexutil"
)

var _ = (*genTxdataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (g genTxdata) MarshalJSON() ([]byte, error) {
	type genTxdata struct {
		AccountNonce hexutil.Uint64  `json:"nonce"    gencodec:"required"`
		Price        *hexutil.Big    `json:"gasPrice" gencodec:"required"`
		GasLimit     hexutil.Uint64  `json:"gas"      gencodec:"required"`
		Recipient    *common.Address `json:"to"       rlp:"nil"`
		Amount       *hexutil.Big    `json:"value"    gencodec:"required"`
		Payload      hexutil.Bytes   `json:"input"    gencodec:"required"`
		V            *hexutil.Big    `json:"v" gencodec:"required"`
		R            *hexutil.Big    `json:"r" gencodec:"required"`
		S            *hexutil.Big    `json:"s" gencodec:"required"`
		Hash         *common.Hash    `json:"hash" rlp:"-"`
	}
	var enc genTxdata
	enc.AccountNonce = hexutil.Uint64(g.AccountNonce)
	enc.Price = (*hexutil.Big)(g.Price)
	enc.GasLimit = hexutil.Uint64(g.GasLimit)
	enc.Recipient = g.Recipient
	enc.Amount = (*hexutil.Big)(g.Amount)
	enc.Payload = g.Payload
	enc.V = (*hexutil.Big)(g.V)
	enc.R = (*hexutil.Big)(g.R)
	enc.S = (*hexutil.Big)(g.S)
	enc.Hash = g.Hash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *genTxdata) UnmarshalJSON(input []byte) error {
	type genTxdata struct {
		AccountNonce *hexutil.Uint64 `json:"nonce"    gencodec:"required"`
		Price        *hexutil.Big    `json:"gasPrice" gencodec:"required"`
		GasLimit     *hexutil.Uint64 `json:"gas"      gencodec:"required"`
		Recipient    *common.Address `json:"to"       rlp:"nil"`
		Amount       *hexutil.Big    `json:"value"    gencodec:"required"`
		Payload      *hexutil.Bytes  `json:"input"    gencodec:"required"`
		V            *hexutil.Big    `json:"v" gencodec:"required"`
		R            *hexutil.Big    `json:"r" gencodec:"required"`
		S            *hexutil.Big    `json:"s" gencodec:"required"`
		Hash         *common.Hash    `json:"hash" rlp:"-"`
	}
	var dec genTxdata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.AccountNonce == nil {
		return errors.New("missing required field 'nonce' for genTxdata")
	}
	g.AccountNonce = uint64(*dec.AccountNonce)
	if dec.Price == nil {
		return errors.New("missing required field 'gasPrice' for genTxdata")
	}
	g.Price = (*big.Int)(dec.Price)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gas' for genTxdata")
	}
	g.GasLimit = uint64(*dec.GasLimit)
	if dec.Recipient != nil {
		g.Recipient = dec.Recipient
	}
	if dec.Amount == nil {
		return errors.New("missing required field 'value' for genTxdata")
	}
	g.Amount = (*big.Int)(dec.Amount)
	if dec.Payload == nil {
		return errors.New("missing required field 'input' for genTxdata")
	}
	g.Payload = *dec.Payload
	if dec.V == nil {
		return errors.New("missing required field 'v' for genTxdata")
	}
	g.V = (*big.Int)(dec.V)
	if dec.R == nil {
		return errors.New("missing required field 'r' for genTxdata")
	}
	g.R = (*big.Int)(dec.R)
	if dec.S == nil {
		return errors.New("missing required field 's' for genTxdata")
	}
	g.S = (*big.Int)(dec.S)
	if dec.Hash != nil {
		g.Hash = dec.Hash
	}
	return nil
}
