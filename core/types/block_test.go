// Copyright 2014 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package types

import (
	"bytes"
	"fmt"
	"math/big"
	"reflect"
	"testing"

	"github.com/anduschain/go-anduschain/common"
	"github.com/anduschain/go-anduschain/rlp"
)

func TestNewBlock(t *testing.T) {
	block1 := NewBlock(&Header{Number: big.NewInt(314)}, nil, nil, nil)

	t.Log("Number", block1.Number())
	t.Log("Difficulty", block1.Difficulty())
	t.Log("GasLimit", block1.GasLimit())
	t.Log("GasUsed", block1.GasUsed())
	t.Log("Coinbase", block1.Coinbase())
	t.Log("Root", block1.Root())
	t.Log("Hash", block1.Hash())
	t.Log("Nonce", block1.Nonce())
	t.Log("Time", block1.Time())
	t.Log("Size", block1.Size())

	buf := new(bytes.Buffer)
	err := block1.EncodeRLP(buf)
	if err != nil {
		t.Error(" Block EncodeRLP", err)
	}

	t.Log("RLP ENCODE HEX", common.Bytes2Hex(buf.Bytes()))

	t.Log("++++++++++++++++++++++++++++++++")

	blockEnc := common.FromHex("f901d5f901d0a00000000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421ba808080808800000000000000008080c0c0")
	block2 := new(Block)
	if err := rlp.DecodeBytes(blockEnc, block2); err != nil {
		t.Fatal("decode error: ", err)
	}

	t.Log("Number", block2.Number())
	t.Log("Difficulty", block2.Difficulty())
	t.Log("GasLimit", block2.GasLimit())
	t.Log("GasUsed", block2.GasUsed())
	t.Log("Coinbase", block2.Coinbase())
	t.Log("Root", block2.Root())
	t.Log("Hash", block2.Hash())
	t.Log("Nonce", block2.Nonce())
	t.Log("Time", block2.Time())
	t.Log("Size", block2.Size())

}

// from bcValidBlockTest.json, "SimpleTx"
func TestBlockEncoding(t *testing.T) {
	blockEnc := common.FromHex("f901d5f901d0a00000000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421ba808080808800000000000000008080c0c0")
	var block Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		t.Fatal("decode error: ", err)
	}

	check := func(f string, got, want interface{}) {
		if !reflect.DeepEqual(got, want) {
			t.Errorf("%s mismatch: got %v, want %v", f, got, want)
		}
	}

	//check("Difficulty", block.Difficulty(), big.NewInt(131072))
	//check("GasLimit", block.GasLimit(), uint64(3141592))
	//check("GasUsed", block.GasUsed(), uint64(21000))
	//check("Coinbase", block.Coinbase(), common.HexToAddress("8888f1f195afa192cfee860698584c030f4c9db1"))
	//check("Root", block.Root(), common.HexToHash("ef1552a40b7165c3cd773806b9e0c165b75356e0314bf0706f279c729f51e017"))
	//check("Hash", block.Hash(), common.HexToHash("0a5843ac1cb04865017cb35a57b50b07084e5fcee39b5acadade33149f4fff9e"))
	//check("Nonce", block.Nonce(), uint64(0xa13a5a8c8f2bb1c4))
	//check("Time", block.Time(), big.NewInt(1426516743))
	//check("Size", block.Size(), common.StorageSize(len(blockEnc)))

	tx1 := NewTransaction(0, common.HexToAddress("095e7baea6a6c7c4c2dfeb977efac326af552d87"), big.NewInt(10), 50000, big.NewInt(10), nil)
	tx1.WithSignature(HomesteadSigner{}, common.Hex2Bytes("9bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094f8a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b100"))

	check("len(Transactions)", block.Transactions().Len(), 0)
	//check("Transactions[0].Hash", block.Transactions().Gen[0].Hash(), tx1.Hash())

	ourBlockEnc, err := rlp.EncodeToBytes(&block)
	if err != nil {
		t.Fatal("encode error: ", err)
	}
	if !bytes.Equal(ourBlockEnc, blockEnc) {
		t.Errorf("encoded block mismatch:\ngot:  %x\nwant: %x", ourBlockEnc, blockEnc)
	}
}

func TestBlockEncoding2(t *testing.T) {
	blockEnc := common.FromHex("f91b7ef90301a08d6fff517b1ab8e04c29b4c52a27fe5aa7a1f772e687cce75b627967f85a2ae794d38bd3b9ee4cae4ee6821949546ea61b77a8fbaca0d568b6217886362024a148f957c36b9890c6b4b9f51faacc16f02cbb4d714201a0076c9774bf7281a8abbe9a8d617e341cbe431608554f61cbe212c9d3b88e993fa071a7f0f1d4dd9cc16409136422b666278cde4e69322b837711a147855248459ca02b3facd4a10d8501ad315ac25c344746261924c8301c5ae860b755bfcd95f84dbbbcf0d81ba79f268207a586082f79cd900080845d9c33ad98d782061186676f64616f6e86676f312e3133856c696e7578880000000000000004b8c4f8c2944283e2ea8b2bb4757a22574cf3ddc2c0c537cc619484063f74f722d956ebebffa313116a7bdc6db64f03f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b841d8dd68acedd27fa62e6d0e0268e9eb872116e7d34b14b1a1d55d24aec6625252408a25636304268338fe90a3166fbfa0c7c052a648642c7688bdc3e0aabc833a01b841da92c9bc8d00f897e17daa04b78976f3d9d7e03f85c2a974eba2521dd44558115bd2cdb1a4a8443cb6808fd24c29b7026f8978d7ee7bc71687bf8aa15a07225f00f90bf4f901510182077a808094000000000000000000000000000000000000da0780b8ecf8c294c55169d8414f3c25832ff49a85410d6f59369bdc9484063f74f722d956ebebffa313116a7bdc6db64f04f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b8411f09a013c15b3c59ab3b5f3ebfcc91d2a842cc56ff8dcc33c814eacfa3c737aa735b42f1d7574d90b712213675ca3ae2dce42bf0fd43f53ae324fb4e75ec678e01040000000000000077c60a25eaa72bdb5790fea231352eaf94b5068d25378c548e9cd338ef6dbf6e840ae4e2e5a074c690de20f64ab60173e07a272fe7eb27ba763257fdc8b38d472b703b1786baa046732e3edf05da09a43b9bb89e256051ef8d8f62d3d05ce1057e3a68eb88c488f901510182077b808094000000000000000000000000000000000000da0780b8ecf8c2944283e2ea8b2bb4757a22574cf3ddc2c0c537cc619484063f74f722d956ebebffa313116a7bdc6db64f03f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b841d8dd68acedd27fa62e6d0e0268e9eb872116e7d34b14b1a1d55d24aec6625252408a25636304268338fe90a3166fbfa0c7c052a648642c7688bdc3e0aabc833a0104000000000000008b839782b99d1f631d2bee2d460f585d5e356ea37526dbbbdbe8290b3cd846fa840ae4e2e6a0154d8be7af4e81df6a94b9d81954341bfabec80e21e74f25d339ddfe61b7f304a06c430bd9262bd3192de6e31c19ce2d3079ca71a8abb87c3655879dd978adab81f90151018207a4808094000000000000000000000000000000000000da0780b8ecf8c294c55169d8414f3c25832ff49a85410d6f59369bdc9484063f74f722d956ebebffa313116a7bdc6db64f04f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b8411f09a013c15b3c59ab3b5f3ebfcc91d2a842cc56ff8dcc33c814eacfa3c737aa735b42f1d7574d90b712213675ca3ae2dce42bf0fd43f53ae324fb4e75ec678e010000000000000000116fec0bfe949a423c063dfafc1f714e5af74ad841f5dbc4c4d2a29c1ebd64d4840ae4e2e5a05222dcd3231b395db76181314339f6bbfb293249ac75eb3bea9b97ed144d29bba028ae5fae5f7f031623c0db5fe839bacf64cb120d5e2ba6671c773beafa3fe8c8f90151018207a5808094000000000000000000000000000000000000da0780b8ecf8c2944283e2ea8b2bb4757a22574cf3ddc2c0c537cc619484063f74f722d956ebebffa313116a7bdc6db64f03f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b841d8dd68acedd27fa62e6d0e0268e9eb872116e7d34b14b1a1d55d24aec6625252408a25636304268338fe90a3166fbfa0c7c052a648642c7688bdc3e0aabc833a0100000000000000001f174d3d177d5a935acbe7cf75b280bc9277061cbb3efaa562a1ce9dee2b0c09840ae4e2e5a020a319637f1877fd25a068f07beff7bf4a848cbb0415182d50e4081d9b211c42a0502c3690652e03930e522f29767a84cbfe8f54d35df6d5d76d76cc68e2501025f901510182077f808094000000000000000000000000000000000000da0780b8ecf8c294c55169d8414f3c25832ff49a85410d6f59369bdc9484063f74f722d956ebebffa313116a7bdc6db64f04f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b8411f09a013c15b3c59ab3b5f3ebfcc91d2a842cc56ff8dcc33c814eacfa3c737aa735b42f1d7574d90b712213675ca3ae2dce42bf0fd43f53ae324fb4e75ec678e010100000000000000dc8116a6a258f37476a0c58c8e61ebe1ce7bc982c4edaf531fcdce6bb46bcb59840ae4e2e6a02cb07798876ca6dd56ec4cb908234cba1199b3baa7fff0eb96078c19a8b68461a0514b2484368108c59903d4ff1aca5c202da2a3082befdb0c9dc22c2f128504d8f9015101820780808094000000000000000000000000000000000000da0780b8ecf8c2944283e2ea8b2bb4757a22574cf3ddc2c0c537cc619484063f74f722d956ebebffa313116a7bdc6db64f03f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b841d8dd68acedd27fa62e6d0e0268e9eb872116e7d34b14b1a1d55d24aec6625252408a25636304268338fe90a3166fbfa0c7c052a648642c7688bdc3e0aabc833a010100000000000000f9eb699c3de958426dda609e22f691fe8782dd248138c4014286b539ea4af8f6840ae4e2e6a04a6c314ca4f3146de1010c7cdcc43b7bfac010cf69dc8054f965f1460dfc769da00caa374e5c5a70009a9bcc9c1403dd640894fe0f200ea2c7ba865d179ddca7eef901510182071a808094000000000000000000000000000000000000da0780b8ecf8c294c55169d8414f3c25832ff49a85410d6f59369bdc9484063f74f722d956ebebffa313116a7bdc6db64f04f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b8411f09a013c15b3c59ab3b5f3ebfcc91d2a842cc56ff8dcc33c814eacfa3c737aa735b42f1d7574d90b712213675ca3ae2dce42bf0fd43f53ae324fb4e75ec678e010200000000000000a5e8b9373ad47e7001436e37aaf65ca6070d351c2a7d42f2db61118aa0342cf5840ae4e2e5a0790521ac47ba95912af1d0492996185b2755357301608a30920968bbc96f8718a007b696c5a01b190ab2ff13ce0c887009932bb78218df06f9e8443f70cf5e168ef901510182071b808094000000000000000000000000000000000000da0780b8ecf8c2944283e2ea8b2bb4757a22574cf3ddc2c0c537cc619484063f74f722d956ebebffa313116a7bdc6db64f03f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b841d8dd68acedd27fa62e6d0e0268e9eb872116e7d34b14b1a1d55d24aec6625252408a25636304268338fe90a3166fbfa0c7c052a648642c7688bdc3e0aabc833a010200000000000000f2ea401d29cf4c7e7e3cbbeb6bb35713dcf92fc7b095c8d5f06d5ddde72b189c840ae4e2e6a0fd6df57a92b539fbeeb922a0efa573a85355f8f72dbbbaf021b992e729ff20eea04ea0f01904aef02c8079d63fe62133b5de39cbe3f6de3285dd8c6eb9622561b4f9015101820778808094000000000000000000000000000000000000da0780b8ecf8c2944283e2ea8b2bb4757a22574cf3ddc2c0c537cc619484063f74f722d956ebebffa313116a7bdc6db64f03f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b841d8dd68acedd27fa62e6d0e0268e9eb872116e7d34b14b1a1d55d24aec6625252408a25636304268338fe90a3166fbfa0c7c052a648642c7688bdc3e0aabc833a010500000000000000ff4f0f6bc8fde6546db628817da2097a2d23742d925843ac3b3fa6291a2c61a4840ae4e2e5a00f73ba97a260a5a6f927fa54467128e98718dc3e106c99ee008c3ca211102d0fa073d59e00eae0155d3c58a45e6ef61dffbd83493e840caf138b8fe7459413673df90c80f9031db902c2f902bfa08d6fff517b1ab8e04c29b4c52a27fe5aa7a1f772e687cce75b627967f85a2ae794d38bd3b9ee4cae4ee6821949546ea61b77a8fbaca0d568b6217886362024a148f957c36b9890c6b4b9f51faacc16f02cbb4d714201a0076c9774bf7281a8abbe9a8d617e341cbe431608554f61cbe212c9d3b88e993fa056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a02b3facd4a10d8501ad315ac25c344746261924c8301c5ae860b755bfcd95f84dbbbcf0d81ba79f268207a586082f79cd900080845d9c33ad98d782061186676f64616f6e86676f312e3133856c696e7578880000000000000004b8c4f8c2944283e2ea8b2bb4757a22574cf3ddc2c0c537cc619484063f74f722d956ebebffa313116a7bdc6db64f03f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b841d8dd68acedd27fa62e6d0e0268e9eb872116e7d34b14b1a1d55d24aec6625252408a25636304268338fe90a3166fbfa0c7c052a648642c7688bdc3e0aabc833a01809446487e37320c14dfc111b857034c7f4576fe4437b84144182fcd2d0998508ff83710c4c75a6dc71a8383cccf965eea5546442ebb004576c8850aa328e34c51af4dc15a0f35ad0a359380185e7f35ea97e5b4e9dc381a01f9031db902c2f902bfa08d6fff517b1ab8e04c29b4c52a27fe5aa7a1f772e687cce75b627967f85a2ae794d38bd3b9ee4cae4ee6821949546ea61b77a8fbaca0d568b6217886362024a148f957c36b9890c6b4b9f51faacc16f02cbb4d714201a0076c9774bf7281a8abbe9a8d617e341cbe431608554f61cbe212c9d3b88e993fa056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a02b3facd4a10d8501ad315ac25c344746261924c8301c5ae860b755bfcd95f84dbbbcf0d81ba79f268207a586082f79cd900080845d9c33ad98d782061186676f64616f6e86676f312e3133856c696e7578880000000000000004b8c4f8c2944283e2ea8b2bb4757a22574cf3ddc2c0c537cc619484063f74f722d956ebebffa313116a7bdc6db64f03f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b841d8dd68acedd27fa62e6d0e0268e9eb872116e7d34b14b1a1d55d24aec6625252408a25636304268338fe90a3166fbfa0c7c052a648642c7688bdc3e0aabc833a0180940cc222e7b32d44ea1a1a5c812e542f820da54cd9b8414e3f7236c5cbcd11974d37ae8259053e79cfbf5b678934af2dd7b0e7cbd134ed42a603c4692f492a77f6af254764cb892991c061b0fd628619ac8cfca719f01f01f9031db902c2f902bfa08d6fff517b1ab8e04c29b4c52a27fe5aa7a1f772e687cce75b627967f85a2ae794d38bd3b9ee4cae4ee6821949546ea61b77a8fbaca0d568b6217886362024a148f957c36b9890c6b4b9f51faacc16f02cbb4d714201a0076c9774bf7281a8abbe9a8d617e341cbe431608554f61cbe212c9d3b88e993fa056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a02b3facd4a10d8501ad315ac25c344746261924c8301c5ae860b755bfcd95f84dbbbcf0d81ba79f268207a586082f79cd900080845d9c33ad98d782061186676f64616f6e86676f312e3133856c696e7578880000000000000004b8c4f8c2944283e2ea8b2bb4757a22574cf3ddc2c0c537cc619484063f74f722d956ebebffa313116a7bdc6db64f03f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b841d8dd68acedd27fa62e6d0e0268e9eb872116e7d34b14b1a1d55d24aec6625252408a25636304268338fe90a3166fbfa0c7c052a648642c7688bdc3e0aabc833a018094d38bd3b9ee4cae4ee6821949546ea61b77a8fbacb841f157a59c2998d4d608783a85eb189dece0cf7628f4f76f37f403f5e6cb99771558016656f21b6b0436966eb592342efab54773eaa7330d6978d1f6286e9d90eb00f9031db902c2f902bfa08d6fff517b1ab8e04c29b4c52a27fe5aa7a1f772e687cce75b627967f85a2ae794d38bd3b9ee4cae4ee6821949546ea61b77a8fbaca0d568b6217886362024a148f957c36b9890c6b4b9f51faacc16f02cbb4d714201a0076c9774bf7281a8abbe9a8d617e341cbe431608554f61cbe212c9d3b88e993fa056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a02b3facd4a10d8501ad315ac25c344746261924c8301c5ae860b755bfcd95f84dbbbcf0d81ba79f268207a586082f79cd900080845d9c33ad98d782061186676f64616f6e86676f312e3133856c696e7578880000000000000004b8c4f8c2944283e2ea8b2bb4757a22574cf3ddc2c0c537cc619484063f74f722d956ebebffa313116a7bdc6db64f03f852013183302e31640a86302e362e3132b8412b075dc6e5b5976f72b59695d7e0bc5cdfab8389b0b2b5d83117e4588b074f9f108bf9a43820f249dd1af34c840846546e6599523f788b71cf052aef74aa28ed00b841d8dd68acedd27fa62e6d0e0268e9eb872116e7d34b14b1a1d55d24aec6625252408a25636304268338fe90a3166fbfa0c7c052a648642c7688bdc3e0aabc833a018094fb4b9b22db637ac97369f23c1138d374efeb3bb3b841c9658baa0955b82747447ff1296dd911fae40ac2d62ddf2883334ee0d195049d119bc5a4dde1c3d2dcc81a943524b5d9c2908a4a5712c6e0155ff4d4ee7a250700")
	var block Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		t.Fatal("decode error: ", err)
	}

	fmt.Println(common.Bytes2Hex(block.header.FairnodeSign))
}
