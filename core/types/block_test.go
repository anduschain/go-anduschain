// Copyright 2014 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package types

import (
	"bytes"
	"math/big"
	"reflect"
	"testing"

	"github.com/anduschain/go-anduschain/common"
	"github.com/anduschain/go-anduschain/rlp"
)

func TestNewBlock(t *testing.T) {
	block1 := NewBlock(&Header{Number: big.NewInt(314)}, nil, nil, nil)

	t.Log("Number", block1.Number())
	t.Log("Difficulty", block1.Difficulty())
	t.Log("GasLimit", block1.GasLimit())
	t.Log("GasUsed", block1.GasUsed())
	t.Log("Coinbase", block1.Coinbase())
	t.Log("Root", block1.Root())
	t.Log("Hash", block1.Hash())
	t.Log("Nonce", block1.Nonce())
	t.Log("Time", block1.Time())
	t.Log("Size", block1.Size())

	buf := new(bytes.Buffer)
	err := block1.EncodeRLP(buf)
	if err != nil {
		t.Error(" Block EncodeRLP", err)
	}

	t.Log("RLP ENCODE HEX", common.Bytes2Hex(buf.Bytes()))

	t.Log("++++++++++++++++++++++++++++++++")

	blockEnc := common.FromHex("f901d5f901d0a00000000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421ba808080808800000000000000008080c0c0")
	block2 := new(Block)
	if err := rlp.DecodeBytes(blockEnc, block2); err != nil {
		t.Fatal("decode error: ", err)
	}

	t.Log("Number", block2.Number())
	t.Log("Difficulty", block2.Difficulty())
	t.Log("GasLimit", block2.GasLimit())
	t.Log("GasUsed", block2.GasUsed())
	t.Log("Coinbase", block2.Coinbase())
	t.Log("Root", block2.Root())
	t.Log("Hash", block2.Hash())
	t.Log("Nonce", block2.Nonce())
	t.Log("Time", block2.Time())
	t.Log("Size", block2.Size())

}

// from bcValidBlockTest.json, "SimpleTx"
func TestBlockEncoding(t *testing.T) {
	blockEnc := common.FromHex("f901d5f901d0a00000000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421ba808080808800000000000000008080c0c0")
	var block Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		t.Fatal("decode error: ", err)
	}

	check := func(f string, got, want interface{}) {
		if !reflect.DeepEqual(got, want) {
			t.Errorf("%s mismatch: got %v, want %v", f, got, want)
		}
	}

	//check("Difficulty", block.Difficulty(), big.NewInt(131072))
	//check("GasLimit", block.GasLimit(), uint64(3141592))
	//check("GasUsed", block.GasUsed(), uint64(21000))
	//check("Coinbase", block.Coinbase(), common.HexToAddress("8888f1f195afa192cfee860698584c030f4c9db1"))
	//check("Root", block.Root(), common.HexToHash("ef1552a40b7165c3cd773806b9e0c165b75356e0314bf0706f279c729f51e017"))
	//check("Hash", block.Hash(), common.HexToHash("0a5843ac1cb04865017cb35a57b50b07084e5fcee39b5acadade33149f4fff9e"))
	//check("Nonce", block.Nonce(), uint64(0xa13a5a8c8f2bb1c4))
	//check("Time", block.Time(), big.NewInt(1426516743))
	//check("Size", block.Size(), common.StorageSize(len(blockEnc)))

	tx1 := NewTransaction(0, common.HexToAddress("095e7baea6a6c7c4c2dfeb977efac326af552d87"), big.NewInt(10), 50000, big.NewInt(10), nil)
	tx1.WithSignature(HomesteadSigner{}, common.Hex2Bytes("9bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094f8a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b100"))

	check("len(Transactions)", block.Transactions().Len(), 0)
	//check("Transactions[0].Hash", block.Transactions().Gen[0].Hash(), tx1.Hash())

	ourBlockEnc, err := rlp.EncodeToBytes(&block)
	if err != nil {
		t.Fatal("encode error: ", err)
	}
	if !bytes.Equal(ourBlockEnc, blockEnc) {
		t.Errorf("encoded block mismatch:\ngot:  %x\nwant: %x", ourBlockEnc, blockEnc)
	}
}

func TestBlockEncoding2(t *testing.T) {
	blockEnc := common.FromHex("f906fcf902ffa0dfa0199d7b14497bffe5222b9bcc18c17ab0adda5210106ffcb5149f8cff2265948c9f4ddc8b24b729bb293000b8d4eadc0aeaa08ca0d998cff0f6a5e5c673a3e1f30b137f9576fa6b813bd62ad84fd945e7d8e9008aa07fe8749b8d529ca3cd086fe278a90ed840144832a7c1b5d226c16d183ddfebd8a06d6b8a6041cb247bf271021aefa919908f4ecbc3431fa8ee9b8b293c47cc5816a0bbbe73c6307e298ca23c33f1d9f72b414bf1ad338bc49a665b16feb19c659f9dbd5b8360a86082f79cd900080845d8e165d98d782060f86676f64616f6e86676f312e3132856c696e7578880000000000000003b8c4f8c294c0c4f3f2632c95ba8926cd7af1007e1aada584e09410ca4b84fef9fce8910cb58acf77255a1a8b61fd05f852013183302e31640a86302e362e3135b8414688fe1d59425249905fb3f41c243e47d2df52a7e2f9967c3e78219af7d9f3911452a756bdbd3627ce7952aa82f8c21267c43ee32c6471fb736e46076774eb0900b8416af20a62a847fee4100a9431cb5396d8fbc1bd137d0597861a0c9bd4dd67891a6221a662ef536b7145be180e9c2b14bd722c0d4e270681ed2e3e01d1806b2e1001b841f0c54172b26437af0ff108748ddc05cdf1e2640fd25aae996de6cba7d83894ba4135d23d2f827074bbffad60af3da7c769d4527512e330ac9c9a5d8010c5119b01f903f6f9014f0109808094000000000000000000000000000000000000da0780b8ecf8c294c0c4f3f2632c95ba8926cd7af1007e1aada584e09410ca4b84fef9fce8910cb58acf77255a1a8b61fd05f852013183302e31640a86302e362e3135b8414688fe1d59425249905fb3f41c243e47d2df52a7e2f9967c3e78219af7d9f3911452a756bdbd3627ce7952aa82f8c21267c43ee32c6471fb736e46076774eb0900b8416af20a62a847fee4100a9431cb5396d8fbc1bd137d0597861a0c9bd4dd67891a6221a662ef536b7145be180e9c2b14bd722c0d4e270681ed2e3e01d1806b2e10010300000000000000835474c8706512538801f3a8b492c4770e0ca69b7658e55d5e62ebc4a5c26dee8401b40e25a0c6608f1c5bdc6b8322edf13d17d6508281eddcdcc52ede711998a853e6647082a04c054a8d1030bc8121985dbfbc8946aeef781a251eee72e8a35ef30671aa95eaf9014f0109808094000000000000000000000000000000000000da0780b8ecf8c294c0c4f3f2632c95ba8926cd7af1007e1aada584e09410ca4b84fef9fce8910cb58acf77255a1a8b61fd05f852013183302e31640a86302e362e3135b8414688fe1d59425249905fb3f41c243e47d2df52a7e2f9967c3e78219af7d9f3911452a756bdbd3627ce7952aa82f8c21267c43ee32c6471fb736e46076774eb0900b8416af20a62a847fee4100a9431cb5396d8fbc1bd137d0597861a0c9bd4dd67891a6221a662ef536b7145be180e9c2b14bd722c0d4e270681ed2e3e01d1806b2e100102000000000000003a9cb12677f26f54f4353a1a025a3255856379d2554f062ecc05140d7c6be3ea8401b40e25a029658c12cb099c56f057b6dcd764c02c04d92aee8b0cb8333a65df1e38362609a07fb698f706b7586afdd590058434047c57069b794e3a1e85c0d872070dce16b2f9014f0109808094000000000000000000000000000000000000da0780b8ecf8c294c0c4f3f2632c95ba8926cd7af1007e1aada584e09410ca4b84fef9fce8910cb58acf77255a1a8b61fd05f852013183302e31640a86302e362e3135b8414688fe1d59425249905fb3f41c243e47d2df52a7e2f9967c3e78219af7d9f3911452a756bdbd3627ce7952aa82f8c21267c43ee32c6471fb736e46076774eb0900b8416af20a62a847fee4100a9431cb5396d8fbc1bd137d0597861a0c9bd4dd67891a6221a662ef536b7145be180e9c2b14bd722c0d4e270681ed2e3e01d1806b2e10010000000000000000c1e72adaad86234931933060c612f1a80bffe5ca6e15f8c1a43a797c12bd45978401b40e25a026c6207b6f0a066c7b8eeeb6661d598d01598e7dcccb1875782f3377f1a46ffea058ec84f70f1d0f71c0f42311b53a7b51f0ce6e941bb39fcf673930b7de96ce05c0")
	var block Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		t.Fatal("decode error: ", err)
	}

	t.Log("Block Hash :", block.Hash().String(), "reuslt", "0xc8fd41156583a3f30dab774f346283acca270e79a739f88126f9d8c71a22560b" == block.Hash().String())

}
