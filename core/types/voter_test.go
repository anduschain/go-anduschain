package types

import (
	"fmt"
	"github.com/anduschain/go-anduschain/common"
	"github.com/anduschain/go-anduschain/rlp"
	"math/big"
	"testing"
)

func makeHeader(number, nonce, coinbase, diff int64) *Header {
	h := new(Header)
	h.Nonce = EncodeNonce(uint64(nonce))
	h.Number = big.NewInt(number)
	h.Coinbase = common.HexToAddress(fmt.Sprintf("%d", coinbase))
	h.Difficulty = big.NewInt(diff)
	return h
}

func TestVoters(t *testing.T) {
	var voters []*Voter
	var headers []*Header

	var blockNum int64

	blockNum = 1234
	headers = append(headers, makeHeader(blockNum, 100, 01, 234244)) // A
	headers = append(headers, makeHeader(blockNum, 100, 01, 234244)) // A
	headers = append(headers, makeHeader(blockNum, 100, 02, 234244)) // B
	headers = append(headers, makeHeader(blockNum, 100, 01, 234244)) // A

	for _, h := range headers {
		voters = append(voters, &Voter{Header: h.Byte(), Voter: common.HexToAddress("0xbfcdac4eb19932b3c3ef885b3e2903908d24a385"), VoteSign: []byte{}})
	}

	vo := Voters(voters)

	t.Log("===>", vo.Hash().String())
	t.Log("===>", common.Bytes2Hex(vo.GetRlp(1)))
	t.Log("===>", common.BytesToHash(vo[1].Header).String())

	// no 1. rpl string common.Bytes2Hex(vo.GetRlp(1)) =  f901efb901d6f901d3a00000000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000bd280808080880000000000000064808094bfcdac4eb19932b3c3ef885b3e2903908d24a38580

	var v *Voter
	b := common.Hex2Bytes("f901efb901d6f901d3a00000000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000bd280808080880000000000000064808094bfcdac4eb19932b3c3ef885b3e2903908d24a38580")
	err := rlp.DecodeBytes(b, &v)
	if err != nil {
		t.Error("rlp.DecodeBytes", err)
	}

	if v.Voter == vo[1].Voter {
		t.Log("passed")
	} else {
		t.Error("fail")
	}

	if common.BytesToHash(vo[1].Header) == common.BytesToHash(v.Header) {
		t.Log("passed")
	} else {
		t.Error("fail")
	}
}
