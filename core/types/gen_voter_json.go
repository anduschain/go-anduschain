// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/anduschain/go-anduschain/common"
	"github.com/anduschain/go-anduschain/common/hexutil"
)

var _ = (*votertMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (v Voter) MarshalJSON() ([]byte, error) {
	type Voter struct {
		HeaderHash common.Hash    `json:"blockHash" gencodec:"required"`
		Difficulty *hexutil.Big   `json:"difficulty" gencodec:"required"`
		Voter      common.Address `json:"voter" gencodec:"required"`
		VoteSign   hexutil.Bytes  `json:"voterSign" gencodec:"required"`
	}
	var enc Voter
	enc.HeaderHash = v.HeaderHash
	enc.Difficulty = (*hexutil.Big)(v.Difficulty)
	enc.Voter = v.Voter
	enc.VoteSign = v.VoteSign
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (v *Voter) UnmarshalJSON(input []byte) error {
	type Voter struct {
		HeaderHash *common.Hash    `json:"blockHash" gencodec:"required"`
		Difficulty *hexutil.Big    `json:"difficulty" gencodec:"required"`
		Voter      *common.Address `json:"voter" gencodec:"required"`
		VoteSign   *hexutil.Bytes  `json:"voterSign" gencodec:"required"`
	}
	var dec Voter
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.HeaderHash == nil {
		return errors.New("missing required field 'blockHash' for Voter")
	}
	v.HeaderHash = *dec.HeaderHash
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for Voter")
	}
	v.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Voter == nil {
		return errors.New("missing required field 'voter' for Voter")
	}
	v.Voter = *dec.Voter
	if dec.VoteSign == nil {
		return errors.New("missing required field 'voterSign' for Voter")
	}
	v.VoteSign = *dec.VoteSign
	return nil
}
